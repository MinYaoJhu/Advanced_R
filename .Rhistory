length(factor)
mod <- lm(mpg ~ wt, data = mtcars)
length(mod)
x <- rnorm(12)
Fn <- ecdf(x)
length(Fn)
x
Fn
str(Fn)
str(mod)
str(factor)
length(factor)
table(letters[1:20])
table <- table(letters[1:20])
str(table)
table <- table(letters[1:20])
str(table)
length(table)
x <- rnorm(12)
Fn <- ecdf(x)
str(Fn)
length(Fn)
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
str(z)
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
str(z)
length(z)
now <- as.POSIXlt(Sys.time())
now <- as.POSIXlt(Sys.time())
str(now)
length(now)
now <- as.POSIXlt(x)
now <- as.POSIXlt(z)
str(now)
length(now)
ordered(rnorm(12))
ordered <- ordered(rnorm(12))
str(ordered)
length(ordered)
now <- as.POSIXlt(z)
str(now)
length(now)
length(unclass(now))
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
str(z)
length(z)
length(unclass(z))
lm
mod <- lm(mpg ~ wt, data = mtcars)
length(mod)
typeof(mod)
str(mod)
mod <- lm(mpg ~ wt, data = mtcars)
typeof(mod)
length(mod)
attributes(mod)
summary(mod)
summary(mod)
new_lm <- function(coefficients,
residuals,
effects,
rank,
fitted.values,
assign,
qr,
df.residual,
xlevels,
call,
terms,
model) {
stopifnot(is.double(coefficients),
is.double(residuals),
is.double(effects),
is.integer(rank),
is.double(fitted.values),
is.integer(assign),
is.list(qr),
is.integer(df.residual),
is.list(xlevels),
is.language(call),
is.language(terms),
is.list(model)
)
structure(
list(
coefficients = coefficients,
residuals = residuals,
effects = effects,
rank = rank,
fitted.values = fitted.values,
assign = assign,
qr = qr,
df.residual = df.residual,
xlevels = xlevels,
call = call,
terms = terms,
model = model
),
class = "lm"
)
}
new_mod <- new_lm(mpg ~ wt, data = mtcars)
new_mod <- new_lm(mpg ~ wt)
new_mod <- new_lm(mod)
g <- function(x) {
x <- 10
y <- 10
UseMethod("g")
}
g.factor <- function(x) cat("FACTOR\n")
g.integer <- function(x) cat("INTEGER\n")
g.default <- function(x) cat("NOT THOSE\n")
x <- factor("A")
x2 <- 1L
g(x)
g(x2)
g(list())
g(c())
g.default(x)
g <- function(x) {
x <- 10
y <- 10
UseMethod("g")
}
g.factor <- function(x) cat("FACTOR\n")
g.integer <- function(x) cat("INTEGER\n")
g.default <- function(x) cat("NOT THOSE\n")
x <- factor("A")
x2 <- 1L
g(x)
g(x2)
g(list())
g(c())
g.default(x)
s3_dispatch(t)
library(sloop)
library(tidyverse)
library(purrr)
library(pryr)
mean
my_new_generic <- function(x) {
UseMethod("my_new_generic")
}
x <- Sys.Date()
s3_dispatch(print(x))
x <- matrix(1:10, nrow = 2)
s3_dispatch(mean(x))
s3_dispatch(sum(Sys.time()))
s3_methods_generic("mean")
s3_methods_class("ordered")
x <- structure(1:10, class = "test")
t(x)
t
t.test
s3_methods_generic("t.test")
s3_methods_class("t.test")
s3_dispatch(t.test(1:10, y = c(7:20)))
ftype(t.test)
s3_dispatch(t)
s3_dispatch(t(x))
library(sloop)
library(tidyverse)
library(purrr)
library(pryr)
class(ordered("x"))
class(Sys.time())
s3_dispatch(print(ordered("x")))
s3_dispatch(print(Sys.time()))
s3_dispatch(ordered("x")[1])
s3_dispatch(Sys.time()[1])
new_secret <- function(x = double()) {
stopifnot(is.double(x))
structure(x, class = "secret")
}
print.secret <- function(x, ...) {
print(strrep("x", nchar(x)))
invisible(x)
}
x <- new_secret(c(15, 1, 456))
x
s3_dispatch(x[1])
x[1]
`[.secret` <- function(x, i) {
new_secret(x[i])
}
`[.secret` <- function(x, i) {
x <- unclass(x)
new_secret(x[i])
}
x[1]
`[.secret` <- function(x, i) {
new_secret(NextMethod())
}
x[1]
s3_dispatch(x[1])
new_secret <- function(x, ..., class = character()) {
stopifnot(is.double(x))
structure(
x,
...,
class = c(class, "secret")
)
}
new_supersecret <- function(x) {
new_secret(x, class = "supersecret")
}
print.supersecret <- function(x, ...) {
print(rep("xxxxx", length(x)))
invisible(x)
}
x2 <- new_supersecret(c(15, 1, 456))
x2
`[.secret` <- function(x, ...) {
new_secret(NextMethod())
}
x2[1:3]
vec_restore.secret <- function(x, to, ...) new_secret(x)
vec_restore.supersecret <- function(x, to, ...) new_supersecret(x)
`[.secret` <- function(x, ...) {
vctrs::vec_restore(NextMethod(), x)
}
x2[1:3]
`[.Date`
.Date
s3_methods_class("POSIXt")
s3_methods_class("POSIXct")
s3_methods_class("POSIXlt")
POSIXt_generics <- s3_methods_class("POSIXt")
POSIXct <- s3_methods_class("POSIXct")
POSIXlt <- s3_methods_class("POSIXlt")
str(POSIXt_generics)
POSIXct_generics <- s3_methods_class("POSIXct")
str(POSIXct_generics)
POSIXlt_generics <- s3_methods_class("POSIXlt")
str(POSIXlt_generics)
union(POSIXct_generics,POSIXlt_generics)
setdiff(POSIXct_generics,POSIXlt_generics)
intersect(POSIXct_generics,POSIXlt_generics)
POSIXt_generics <- s3_methods_class("POSIXt")$generic
str(POSIXt_generics)
POSIXct_generics <- s3_methods_class("POSIXct")$generic
str(POSIXct_generics)
POSIXlt_generics <- s3_methods_class("POSIXlt")$generic
str(POSIXlt_generics)
setdiff(POSIXct_generics,POSIXlt_generics)
intersect(POSIXct_generics,POSIXlt_generics)
setdiff(POSIXct_generics,POSIXlt_generics)
setdiff(POSIXlt_generics,POSIXct_generics)
generic2 <- function(x) UseMethod("generic2")
generic2.a1 <- function(x) "a1"
generic2.a2 <- function(x) "a2"
generic2.b <- function(x) {
class(x) <- "a1"
NextMethod()
}
generic2(structure(list(), class = c("b", "a2")))
generic2.b <- function(x) {
class(x) <- "a1"
print(.Class)
NextMethod()
}
generic2(structure(list(), class = c("b", "a2")))
generic2 <- function(x) UseMethod("generic2")
# The generic function generic2 is defined.
generic2.a1 <- function(x) "a1"
generic2.a2 <- function(x) "a2"
# The methods generic2.a1 and generic2.a2 are defined.
generic2.b <- function(x) {
class(x) <- "a1"
NextMethod()
}
# The method generic2.b is defined.
generic2(structure(list(), class = c("b", "a2")))
# The generic function generic2 is called with an object of class "b" and "a2".
# The method generic2.b is called.
# The class of the object is changed to "a1".
# The next method is called.
# The method generic2.a1 is called.
# The result is returned.
generic2 <- function(x) UseMethod("generic2")
# The generic function generic2 is defined.
generic2.a1 <- function(x) "a1"
generic2.a2 <- function(x) "a2"
# The methods generic2.a1 and generic2.a2 are defined.
generic2.b <- function(x) {
class(x) <- "a1"
NextMethod()
}
# The method generic2.b is defined.
generic2(structure(list(), class = c("b")))
generic2 <- function(x) UseMethod("generic2")
# The generic function generic2 is defined.
generic2.a1 <- function(x) "a1"
generic2.a2 <- function(x) "a2"
# The methods generic2.a1 and generic2.a2 are defined.
generic2.b <- function(x) {
class(x) <- "a1"
NextMethod()
}
# The method generic2.b is defined.
generic2(structure(list(), class = c("b", "a2")))
# The generic function generic2 is called with an object of class "b" and "a2".
# The method generic2.b is called.
# The class of the object is changed to "a1".
# The next method is called.
# The method generic2.a1 is called.
# The result is returned.
generic2.b <- function(x) {
class(x) <- "a1"
print(.Class)
NextMethod()
}
generic2(structure(list(), class = c("b", "a2")))
install.packages(c("ape", "blob", "commonmark", "ggmap", "gtable", "htmlwidgets", "lme4", "ps", "qpdf", "rlang", "scatterplot3d", "sf", "survival", "testthat", "tibble", "vctrs", "wk", "XML"))
install.packages(c("ape", "blob", "commonmark", "ggmap", "gtable", "htmlwidgets", "lme4", "ps", "qpdf", "rlang", "scatterplot3d", "sf", "survival", "testthat", "tibble", "vctrs", "wk", "XML"))
length.integer <- function(x) 10
x1 <- 1:5
class(x1)
s3_dispatch(length(x1))
library(sloop)
library(tidyverse)
library(purrr)
library(pryr)
class(ordered("x"))
class(Sys.time())
s3_dispatch(print(ordered("x")))
s3_dispatch(print(Sys.time()))
s3_dispatch(ordered("x")[1])
s3_dispatch(Sys.time()[1])
new_secret <- function(x = double()) {
stopifnot(is.double(x))
structure(x, class = "secret")
}
print.secret <- function(x, ...) {
print(strrep("x", nchar(x)))
invisible(x)
}
x <- new_secret(c(15, 1, 456))
x
s3_dispatch(x[1])
x[1]
`[.secret` <- function(x, i) {
new_secret(x[i])
}
`[.secret` <- function(x, i) {
x <- unclass(x)
new_secret(x[i])
}
x[1]
`[.secret` <- function(x, i) {
new_secret(NextMethod())
}
x[1]
s3_dispatch(x[1])
new_secret <- function(x, ..., class = character()) {
stopifnot(is.double(x))
structure(
x,
...,
class = c(class, "secret")
)
}
new_supersecret <- function(x) {
new_secret(x, class = "supersecret")
}
print.supersecret <- function(x, ...) {
print(rep("xxxxx", length(x)))
invisible(x)
}
x2 <- new_supersecret(c(15, 1, 456))
x2
`[.secret` <- function(x, ...) {
new_secret(NextMethod())
}
x2[1:3]
vec_restore.secret <- function(x, to, ...) new_secret(x)
vec_restore.supersecret <- function(x, to, ...) new_supersecret(x)
`[.secret` <- function(x, ...) {
vctrs::vec_restore(NextMethod(), x)
}
x2[1:3]
`[.Date`
.Date
POSIXt_generics <- s3_methods_class("POSIXt")$generic
str(POSIXt_generics)
POSIXct_generics <- s3_methods_class("POSIXct")$generic
str(POSIXct_generics)
POSIXlt_generics <- s3_methods_class("POSIXlt")$generic
str(POSIXlt_generics)
setdiff(POSIXct_generics,POSIXlt_generics)
setdiff(POSIXlt_generics,POSIXct_generics)
intersect(POSIXct_generics,POSIXlt_generics)
generic2.b <- function(x) {
class(x) <- "a1"
print(.Class)
NextMethod()
}
generic2(structure(list(), class = c("b", "a2")))
class(matrix(1:5))
s3_class(matrix(1:5))
s3_dispatch(print(matrix(1:5)))
x1 <- 1:5
class(x1)
s3_dispatch(mean(x1))
x2 <- structure(x1, class = "integer")
class(x2)
s3_dispatch(mean(x2))
s3_dispatch(Sys.time()[1])
s3_dispatch(sum(Sys.time()))
y <- as.difftime(10, units = "mins")
s3_dispatch(abs(y))
Math.difftime <- function(x, ...) {
new_difftime(NextMethod(), units = attr(x, "units"))
}
date <- as.Date("2017-01-01")
integer <- 1L
date + integer
integer + date
length.integer <- function(x) 10
x1 <- 1:5
class(x1)
s3_dispatch(length(x1))
x2 <- structure(x1, class = "integer")
class(x2)
s3_dispatch(length(x2))
attr(x1, "class")
s3_class(x1)  # implicit
attr(x2, "class")
s3_class(x2)  # explicit
?Math
s3_methods_generic("Math")
Math.data.frame
function (x, ...)
{
mode.ok <- vapply(x, function(x) is.numeric(x) || is.logical(x) ||
is.complex(x), NA)
if (all(mode.ok)) {
x[] <- lapply(X = x, FUN = .Generic, ...)
return(x)
}
else {
vnames <- names(x)
if (is.null(vnames))
vnames <- seq_along(x)
stop("non-numeric-alike variable(s) in data frame: ",
paste(vnames[!mode.ok], collapse = ", "))
}
}
Math.data.frame <- function(x) "hello"
abs(mtcars)
exp(mtcars)
lgamma(mtcars)
Math.data.frame <- function(x, ...) {
.Generic
}
abs(mtcars)
exp(mtcars)
lgamma(mtcars)
rm(Math.data.frame)
Math.factor
Math.difftime <- function(x, ...) {
new_difftime(NextMethod(), units = attr(x, "units"))
}
rm(Math.difftime)
Math.difftime
generic2 <- function(x) UseMethod("generic2")
# The generic function generic2 is defined.
generic2.a1 <- function(x) "a1"
generic2.a2 <- function(x) "a2"
# The methods generic2.a1 and generic2.a2 are defined.
generic2.b <- function(x) {
class(x) <- "a1"
NextMethod()
}
# The method generic2.b is defined.
generic2(structure(list(), class = c("b", "a2")))
# The generic function generic2 is called with an object of class "b" and "a2".
# The method generic2.b is called.
# The class of the object is changed to "a1".
# The next method is called.
# The method generic2.a1 is called.
# The result is returned.
`[.Date` <- function(x, ..., drop = TRUE) {
out <- NextMethod("[")
class(out) <- class(x)
out
}
x <- structure(1:4, test = "test", class = c("myDate", "Date"))
attributes(x[1])
POSIXt_generics <- s3_methods_class("POSIXt")$generic
str(POSIXt_generics)
s3_methods_class("POSIXt")
POSIXt_generics <- s3_methods_class("POSIXt")$generic
str(POSIXt_generics)
s3_methods_class("POSIXct")
POSIXct_generics <- s3_methods_class("POSIXct")$generic
str(POSIXct_generics)
s3_methods_class("POSIXlt")
POSIXlt_generics <- s3_methods_class("POSIXlt")$generic
str(POSIXlt_generics)
`[.secret` <- function(x, ...) {
clx <- class(x)
new_secret(NextMethod(), class=clx[-length(clx)])
}
# test it
x2[1:3]
class(x2[1])
# install.packages("R6")
library(R6)
