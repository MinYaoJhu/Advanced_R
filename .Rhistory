x_stat <- sum((m - me)^2 / me)
df <- (length(margin1) - 1) * (length(margin2) - 1)
p.value <- pchisq(x_stat, df = df, lower.tail = FALSE)
list(x_stat = x_stat, df = df, p.value = p.value)
}
a <- 21:25
b <- seq(21, 29, 2)
m <- cbind(a, b)
chisq.test(m) %>% print(digits=5)
a <- 21:25
b <- seq(21, 29, 2)
m <- cbind(a, b)
chisq.test(m) |> print(digits=5)
chisq.test2(a, b)
bench::mark(
chisq.test(m),
chisq.test2(a, b),
check = FALSE
)
table
table()
view(table)
View(table)
table2 <- function(a, b){
a_s <- sort(unique(a))
b_s <- sort(unique(b))
a_l <- length(a_s)
b_l <- length(b_s)
dims <- c(a_l, b_l)
pr <- a_l * b_l
dn <- list(a = a_s, b = b_s)
bin <- fastmatch::fmatch(a, a_s) +
a_l * fastmatch::fmatch(b, b_s) - a_l
y <- tabulate(bin, pr)
y <- array(y, dim = dims, dimnames = dn)
class(y) <- "table"
y
}
a <- sample(100, 10000, TRUE)
b <- sample(100, 10000, TRUE)
bench::mark(
table(a, b),
table2(a, b)
)
table()
stats::table
base::table
?dnorm
rnorm(10, mean = 10:1)
weightedsum <- bench::press(
n = 1:10,
{
x <- rnorm(n * 1e6)
bench::mark(
sum = sum(x * x),
crossprod = crossprod(x, x)[[1]]
)
}
)
weightedsum |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(aes(n, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Vector Length (millions)",
y = "Median Execution Time (s)") +
theme(legend.position = "top")
rowAny <- function(x) rowSums(x) > 0
rowAll <- function(x) rowSums(x) == ncol(x)
lookup <- setNames(as.list(sample(100, 26)), letters)
x1 <- "j"
x10 <- sample(letters, 10)
x100 <- sample(letters, 100, replace = TRUE)
bench::mark(
lookup[x1],
lookup[x10],
lookup[x100],
check = FALSE
)[c("expression", "min", "median", "itr/sec", "n_gc")]
#?dnorm
rnorm(10, mean = 10:1)
rowsums <- bench::press(
p = seq(500, 5000, length.out = 10),
{
mat <- tcrossprod(rnorm(p), rnorm(p))
bench::mark(
rowSums = rowSums(mat),
apply = apply(mat, 1, sum)
)
}
)
library(ggplot2)
rowsums |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(
aes(p, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Number of Rows and Columns",
y = "Median (s)") +
theme(legend.position = "top")
weightedsum <- bench::press(
n = 1:10,
{
x <- rnorm(n * 1e6)
bench::mark(
sum = sum(x * x),
crossprod = crossprod(x, x)[[1]]
)
}
)
weightedsum |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(aes(n, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Vector Length (millions)",
y = "Median Execution Time (s)") +
theme(legend.position = "top")
random_string <- function() {
paste(sample(letters, 50, replace = TRUE), collapse = "")
}
strings10 <- replicate(10, random_string())
strings100 <- replicate(100, random_string())
collapse <- function(xs) {
out <- ""
for (x in xs) {
out <- paste0(out, x)
}
out
}
bench::mark(
loop10  = collapse(strings10),
loop100 = collapse(strings100),
vec10   = paste(strings10, collapse = ""),
vec100  = paste(strings100, collapse = ""),
check = FALSE
)[c("expression", "min", "median", "itr/sec", "n_gc")]
m <- 1000
n <- 50
X <- matrix(rnorm(m * n, mean = 10, sd = 3), nrow = m)
grp <- rep(1:2, each = n / 2)
system.time(
for (i in 1:m) {
t.test(X[i, ] ~ grp)$statistic
}
)
system.time(
for (i in 1:m) {
t.test(X[i, grp == 1], X[i, grp == 2])$statistic
}
)
compT <- function(i){
t.test(X[i, grp == 1], X[i, grp == 2])$statistic
}
system.time(t1 <- purrr::map_dbl(1:m, compT))
my_t <- function(x, grp) {
t_stat <- function(x) {
m <- mean(x)
n <- length(x)
var <- sum((x - m) ^ 2) / (n - 1)
list(m = m, n = n, var = var)
}
g1 <- t_stat(x[grp == 1])
g2 <- t_stat(x[grp == 2])
se_total <- sqrt(g1$var / g1$n + g2$var / g2$n)
(g1$m - g2$m) / se_total
}
system.time(t2 <- purrr::map_dbl(1:m, ~ my_t(X[.,], grp)))
stopifnot(all.equal(t1, t2))
rowtstat <- function(X, grp){
t_stat <- function(X) {
m <- rowMeans(X)
n <- ncol(X)
var <- rowSums((X - m) ^ 2) / (n - 1)
list(m = m, n = n, var = var)
}
g1 <- t_stat(X[, grp == 1])
g2 <- t_stat(X[, grp == 2])
se_total <- sqrt(g1$var / g1$n + g2$var / g2$n)
(g1$m - g2$m) / se_total
}
system.time(t3 <- rowtstat(X, grp))
stopifnot(all.equal(t1, t3))
x <- rnorm(10)
w <- rnorm(10)
isTRUE(all.equal(sum(x * w), crossprod(x, w)[[1]]))
x <- rnorm(10)
w <- rnorm(10)
all.equal(sum(x * w), crossprod(x, w)[[1]])
rnorm(n * 1e6)
weightedsum <- bench::press(
n = 1:10,
{
x <- rnorm(n * 1e6)
bench::mark(
sum = sum(x * x),
crossprod = crossprod(x, x)[[1]]
)
}
)
weightedsum |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(aes(n, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Vector Length (millions)",
y = "Median Execution Time (s)") +
theme(legend.position = "top")
rowAny <- function(x) rowSums(x) > 0
rowAll <- function(x) rowSums(x) == ncol(x)
lookup <- setNames(as.list(sample(100, 26)), letters)
x1 <- "j"
x10 <- sample(letters, 10)
x100 <- sample(letters, 100, replace = TRUE)
bench::mark(
lookup[x1],
lookup[x10],
lookup[x100],
check = FALSE
)[c("expression", "min", "median", "itr/sec", "n_gc")]
#?dnorm
rnorm(10, mean = 10:1)
rowsums <- bench::press(
p = seq(500, 5000, length.out = 10),
{
mat <- tcrossprod(rnorm(p), rnorm(p))
bench::mark(
rowSums = rowSums(mat),
apply = apply(mat, 1, sum)
)
}
)
library(ggplot2)
rowsums |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(
aes(p, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Number of Rows and Columns",
y = "Median (s)") +
theme(legend.position = "top")
x <- rnorm(10)
w <- rnorm(10)
all.equal(sum(x * w), crossprod(x, w)[[1]])
weightedsum <- bench::press(
n = 1:10,
{
x <- rnorm(n * 1e6)
bench::mark(
sum = sum(x * x),
crossprod = crossprod(x, x)[[1]]
)
}
)
weightedsum |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(aes(n, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Vector Length (millions)",
y = "Median Execution Time (s)") +
theme(legend.position = "top")
random_string <- function() {
paste(sample(letters, 50, replace = TRUE), collapse = "")
}
strings10 <- replicate(10, random_string())
strings100 <- replicate(100, random_string())
collapse <- function(xs) {
out <- ""
for (x in xs) {
out <- paste0(out, x)
}
out
}
bench::mark(
loop10  = collapse(strings10),
loop100 = collapse(strings100),
vec10   = paste(strings10, collapse = ""),
vec100  = paste(strings100, collapse = ""),
check = FALSE
)[c("expression", "min", "median", "itr/sec", "n_gc")]
m <- 1000
n <- 50
X <- matrix(rnorm(m * n, mean = 10, sd = 3), nrow = m)
grp <- rep(1:2, each = n / 2)
system.time(
for (i in 1:m) {
t.test(X[i, ] ~ grp)$statistic
}
)
system.time(
for (i in 1:m) {
t.test(X[i, grp == 1], X[i, grp == 2])$statistic
}
)
compT <- function(i){
t.test(X[i, grp == 1], X[i, grp == 2])$statistic
}
system.time(t1 <- purrr::map_dbl(1:m, compT))
my_t <- function(x, grp) {
t_stat <- function(x) {
m <- mean(x)
n <- length(x)
var <- sum((x - m) ^ 2) / (n - 1)
list(m = m, n = n, var = var)
}
g1 <- t_stat(x[grp == 1])
g2 <- t_stat(x[grp == 2])
se_total <- sqrt(g1$var / g1$n + g2$var / g2$n)
(g1$m - g2$m) / se_total
}
system.time(t2 <- purrr::map_dbl(1:m, ~ my_t(X[.,], grp)))
stopifnot(all.equal(t1, t2))
rowtstat <- function(X, grp){
t_stat <- function(X) {
m <- rowMeans(X)
n <- ncol(X)
var <- rowSums((X - m) ^ 2) / (n - 1)
list(m = m, n = n, var = var)
}
g1 <- t_stat(X[, grp == 1])
g2 <- t_stat(X[, grp == 2])
se_total <- sqrt(g1$var / g1$n + g2$var / g2$n)
(g1$m - g2$m) / se_total
}
system.time(t3 <- rowtstat(X, grp))
stopifnot(all.equal(t1, t3))
weightedsum <- bench::press(
n = 1:10,
{
x <- rnorm(n * 1e6)
bench::mark(
sum = sum(x * x),
crossprod = crossprod(x, x)[[1]]
)
}
)
weightedsum |>
summary() |>
dplyr::mutate(Approach = as.character(expression)) |>
ggplot(aes(n, median, color = Approach, group = Approach)) +
geom_point() +
geom_line() +
labs(x = "Vector Length (millions)",
y = "Median Execution Time (s)") +
theme(legend.position = "top")
library(Rcpp)
mean
cumsum
library(Rcpp)
tmp <- ordered(c("mm","cm","m","m","mm","cm"),
levels=c("mm","cm","m")) ## size order
tmp
as.numeric(tmp)
levels(tmp)
position(tmp)
Position(tmp)
Position("mm",tmp)
Position(x = "mm",tmp)
tmp <- ordered(c("mm","cm","m","m","mm","cm"),
levels=c("mm","cm","m")) ## size order
tmp
Position(f(x){x = "mm"},tmp)
Position(which(x == "mm"),tmp)
Position("mm",tmp)
f4(sample, c(1,2))
Position(sample, c(1,2))
sample
ndvar(10);ndunc(21)
pmin(x, 0)
x <- mcstoc(rnorm, "V")
View(X)
pmin(x, 0)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
f5(x1, x2)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
f5(x1, x2)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
f5(x1, x2)
```{r}
x <- c(T,T,F)
y <- c(T,T,T)
all(x)
allC(x)
all(y)
allC(y)
a1 <- c(T,T,F,T,T,F)
a2 <- c(T,T,T,T,T,T)
all(a1)
allC(a1)
all(a2)
allC(a2)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
# add works like a regular R function
add
add(1, 2, 3)
?Position
Position(f,x)
f <- f(x) x=5
f <- f(x) x>5
f <- function(x) x>5
x = 1:10
Position(f,x)
x
f <- function(x) x=5
x = 1:10
x
Position(f,x)
f <- function(x) x>5
x = 1:10
x
Position(f,x)
library(Rcpp)
mod <- lm(mpg ~ wt, data = mtcars)
mpe(mod)
library(Rcpp)
mod <- lm(mpg ~ wt, data = mtcars)
mpe(mod)
minC(c(2:4, NA))
minC(c(2:4, NA), na_rm = TRUE)
minC(c(NA, NA), na_rm = TRUE)
anyC(c(NA, TRUE))  # any(c(NA, TRUE)) would return TRUE in this case
anyC(c(NA, TRUE), na_rm = TRUE)
anyC(c(NA, TRUE))  # any(c(NA, TRUE)) would return TRUE in this case
anyC(c(NA, TRUE), na_rm = TRUE)
cumsumC(c(1, NA, 2, 4))
result1 <- cumsumC(c(1, 2, NA, 4, NA, 3))
result2 <- cumsumC(c(1, 2, NA, 4, NA, 3), na_rm = TRUE)
print(result1)
print(result2)
result1 <- anyC(c(TRUE, FALSE, NA, TRUE))
result2 <- anyC(c(TRUE, FALSE, NA, TRUE), na_rm = TRUE)
print(result1)
print(result2)
result1 <- minC(c(3, 1, 2, 4, NA))
result2 <- minC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- minC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- cumsumC(c(1, 2, NA, 4, NA, 3))
result2 <- cumsumC(c(1, 2, NA, 4, NA, 3), na_rm = TRUE)
print(result1)
print(result2)
result1 <- diffC(c(1, NA, 3, 5, NA, 10, 12), lag = 2)
result1 <- diffC(c(1, NA, 3, 5, NA, 10, 12), lag = 2)
result2 <- diffC(c(1, NA, 3, 5, NA, 10, 12), lag = 2, na_rm = TRUE)
print(result1)
print(result2)
result1 <- maxC(c(3, 1, 2, 4, NA))
result1 <- maxC(c(3, 1, 2, 4, NA))
result2 <- maxC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- maxC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
#include <Rcpp.h>
using namespace Rcpp;
result1 <- rangeC(c(3, 1, 2, 4, NA))
result2 <- rangeC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- rangeC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
#include <Rcpp.h>
using namespace Rcpp;
result1 <- meanC(c(3, 1, 2, 4, NA))
result2 <- meanC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- meanC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- varC(c(3, 1, 2, 4, NA))
result2 <- varC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- varC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- meanC(c(3, 1, 2, 4, NA))
result2 <- meanC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- meanC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- varC(c(3, 1, 2, 4, NA))
result2 <- varC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- varC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
diff(c(1, NA, 3, 5, NA, 10, 12))
diff(c(1, NA, 3, 5, NA, 10, 12), lag = 2)
