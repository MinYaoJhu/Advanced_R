alex <- Person("Alex", age = 30)
alex@age <- 1:10
validObject(alex)
?utils::person
setGeneric("myGeneric", function(x) standardGeneric("myGeneric"))
# Don't do this!
setGeneric("myGeneric", function(x) {
standardGeneric("myGeneric")
})
setGeneric("myGeneric",
function(x, ..., verbose = TRUE) standardGeneric("myGeneric"),
signature = "x"
)
setMethod("myGeneric", "Person", function(x) {
# method implementation
})
args(getGeneric("show"))
setMethod("show", "Person", function(object) {
cat(is(object)[[1]], "\n",
"  Name: ", object@name, "\n",
"  Age:  ", object@age, "\n",
sep = ""
)
})
john
person_name <- function(x) x@name
setGeneric("name", function(x) standardGeneric("name"))
setMethod("name", "Person", function(x) x@name)
name(john)
setGeneric("name<-", function(x, value) standardGeneric("name<-"))
setMethod("name<-", "Person", function(x, value) {
x@name <- value
validObject(x)
x
})
name(john) <- "Jon Smythe"
name(john)
name(john) <- letters
knitr::include_graphics("diagrams/s4/emoji.png")
library(emoji)
knitr::include_graphics("diagrams/s4/single.png")
knitr::include_graphics("diagrams/s4/single-any.png")
knitr::include_graphics("diagrams/s4/multiple.png")
knitr::include_graphics("diagrams/s4/multiple-ambig.png")
knitr::include_graphics("diagrams/s4/multiple-ambig-2.png")
knitr::include_graphics("diagrams/s4/multiple-any.png")
knitr::include_graphics("diagrams/s4/multiple-all.png")
knitr::include_graphics("diagrams/s4/single-single.png")
knitr::include_graphics("diagrams/s4/single-single-ambig.png")
knitr::include_graphics("diagrams/s4/single-multiple.png")
knitr::include_graphics("diagrams/s4/multiple-multiple.png")
RangedNumeric <- setClass(
"RangedNumeric",
contains = "numeric",
slots = c(min = "numeric", max = "numeric"),
prototype = structure(numeric(), min = NA_real_, max = NA_real_)
)
rn <- RangedNumeric(1:10, min = 1, max = 10)
rn@min
rn@.Data
setGeneric("mean")
selectMethod("mean", "ANY")
setClass("Human")
new("Human")
setClass("Programmer", contains = "Human")
setClass("Factor",
slots = c(
data = "integer",
levels = "character",
ordered = "logical"
),
prototype = list(
data = integer(),
levels = character(),
ordered = FALSE
)
)
new("Factor", data = c(1L, 2L), levels = letters[1:3])
test_period <- lubridate::period(
c(1, 2, 3, 4, 5, 6, 7),
c("year", "month", "week", "day", "hour", "minute", "second")
)
test_period
library(methods)
setClass("Person",
slots = c(
name = "character",
age = "numeric"
)
)
john <- new("Person", name = "John Smith", age = NA_real_)
is(john)
john@name
slot(john, "age")
setGeneric("age", function(x) standardGeneric("age"))
setGeneric("age<-", function(x, value) standardGeneric("age<-"))
setMethod("age", "Person", function(x) x@age)
setMethod("age<-", "Person", function(x, value) {
x@age <- value
x
})
age(john) <- 50
age(john)
sloop::otype(john)
sloop::ftype(age)
library(lubridate)
period(c(90, 5), c("second", "minute"))
period(-1, "days")
period(c(3, 1, 2, 13, 1), c("second", "minute", "hour", "day", "week"))
period(c(1, -60), c("hour", "minute"))
period(0, "second")
test_period <- lubridate::period(
c(1, 2, 3, 4, 5, 6, 7),
c("year", "month", "week", "day", "hour", "minute", "second")
)
test_period
str(test_period)
per <- lubridate::period()
tibble(name=slotNames(per),
class=map_chr(name, ~ class(getElement(per, .x))))
library(tidyverse)
per <- lubridate::period()
tibble(name=slotNames(per),
class=map_chr(name, ~ class(getElement(per, .x))))
decimal_second(test_period)
second(test_period)
decimal_second(test_period)
lubridate::decimal_second(test_period)
setClass("Human")
new("Human")
setClass("Programmer", contains = "Human")
setClass("Programmer", contains = "Human")
new("Human")
setClass("Programmer", contains = "Human")
new("Programmer")
str(Programmer)
setClass("Programmer", contains = "Human")
P <- new("Programmer")
str(P)
setClass("Programmer", contains = "Human")
Programmer <- new("Programmer")
str(Programmer)
Programmer <- new("Programmer")
str(Programmer)
setClass("Programmer", contains = "Human")
new("Programmer")
Programmer <- new("Programmer")
str(Programmer)
per <- lubridate::period()
str(per)
tibble(name=slotNames(per),
class=map_chr(name, ~ class(getElement(per, .x))))
second(test_period)
setGeneric("age", function(x) standardGeneric("age"))
setGeneric("age<-", function(x, value) standardGeneric("age<-"))
setMethod("age", "Person", function(x) x@age)
setMethod("age<-", "Person", function(x, value) {
x@age <- value
x
})
age(john) <- 50
age(john)
setMethod("age", "Person", function(x) x@age)
setMethod("age<-", "Person", function(x, value) {
x@age <- value
validObject(x)
x
})
age(john) <- 50
age(john)
setGeneric("age", function(x) standardGeneric("age"))
setGeneric("age<-", function(x, value) standardGeneric("age<-"))
setMethod("show", "Person", function(object) {
cat(is(object)[[1]], "\n",
"  Name: ", object@name, "\n",
"  Age:  ", object@age, "\n",
sep = ""
)
})
john
#> Person
#>   Name: John Smith
#>   Age:  50
john
john@name
is(john)
.Person <- setClass(
"Person",
slots = c(name = "character", age = "numeric")
)
hadley <- .Person(name = "Hadley")
hadley
formals("show")
setMethod("show", "Person", function(object) {
cat(object@name, "creates hard exercises")
})
hadley
setMethod("show", "Person", function(x) {
cat(x@name, "creates hard exercises")
})
hadley
setMethod("show", "Person", function(x, y) {
cat(x@name, "is", x@age, "years old")
})
setMethod("show", "Person", function(object, y) {
cat(object@name, "is", object@age, "years old")
})
.Person <- setClass(
"Person",
slots = c(name = "character", age = "numeric")
)
hadley <- .Person(name = "Hadley", age = 30)
hadley
.Person <- setClass(
"Person",
slots = c(name = "character", age = "numeric")
)
hadley <- .Person(name = "Hadley", age = 30)
hadley
formals("show")
setMethod("show", "Person", function(object) {
cat(object@name, "creates hard exercises")
})
hadley
setMethod("show", "Person", function(x) {
cat(x@name, "creates hard exercises")
})
hadley
setMethod("show", "Person", function(x, y) {
cat(x@name, "is", x@age, "years old")
})
setMethod("show", "Person", function(object, y) {
cat(object@name, "is", object@age, "years old")
})
setMethod("show", "Person", function(object) {
cat(object@name, "is", object@age, "years old")
})
setMethod("show", "Person", function(object) {
cat(object@name, "is", object@age, "years old")
})
hadley
setMethod("show", "Person", function(object, y) {
cat(object@name, "is", object@age, "years old")
})
.Person <- setClass(
"Person",
slots = c(name = "character", age = "numeric")
)
setMethod("show", "Person", function(object) {
cat(is(object)[[1]], "\n",
"  Name: ", object@name, "\n",
"  Age:  ", object@age, "\n",
sep = ""
)
})
hadley <- .Person(name = "Hadley", age = 30)
hadley
formals("show")
setMethod("show", "Person", function(object) {
cat(object@name, "creates hard exercises")
})
hadley
setMethod("show", "Person", function(x) {
cat(x@name, "creates hard exercises")
})
hadley
setMethod("show", "Person", function(x, y) {
cat(x@name, "is", x@age, "years old")
})
setMethod("show", "Person", function(object, y) {
cat(object@name, "is", object@age, "years old")
})
setMethod("show", "Person", function(object) {
cat(object@name, "is", object@age, "years old")
})
hadley
library(tidyverse)
library(methods)
setClass("Person",
slots = c(
name = "character",
age = "numeric"
)
)
john <- new("Person", name = "John Smith", age = NA_real_)
is(john)
john@name
slot(john, "age")
setGeneric("age", function(x) standardGeneric("age"))
setGeneric("age<-", function(x, value) standardGeneric("age<-"))
setMethod("age", "Person", function(x) x@age)
setMethod("age<-", "Person", function(x, value) {
x@age <- value
x
})
age(john) <- 50
age(john)
sloop::otype(john)
sloop::ftype(age)
library(lubridate)
period(c(90, 5), c("second", "minute"))
period(-1, "days")
period(c(3, 1, 2, 13, 1), c("second", "minute", "hour", "day", "week"))
period(c(1, -60), c("hour", "minute"))
period(0, "second")
test_period <- lubridate::period(
c(1, 2, 3, 4, 5, 6, 7),
c("year", "month", "week", "day", "hour", "minute", "second")
)
test_period
str(test_period)
per <- lubridate::period()
str(per)
tibble(name=slotNames(per),
class=map_chr(name, ~ class(getElement(per, .x))))
second(test_period)
setClass("Person",
slots = c(
name = "character",
age = "numeric"
),
prototype = list(
name = NA_character_,
age = NA_real_
)
)
me <- new("Person", name = "Hadley")
str(me)
setClass("Employee",
contains = "Person",
slots = c(
boss = "Person"
),
prototype = list(
boss = new("Person")
)
)
str(new("Employee"))
is(new("Person"))
is(new("Employee"))
is(john, "Person")
setClass("A", slots = c(x = "numeric"))
a <- new("A", x = 10)
setClass("A", slots = c(a_different_slot = "numeric"))
# a <- new("A", a_different_slot = 10)
a
Person <- function(name, age = NA) {
age <- as.double(age)
new("Person", name = name, age = age)
}
Person("Hadley")
Person(mtcars)
Person("Hadley", age = c(30, 37))
setValidity("Person", function(object) {
if (length(object@name) != length(object@age)) {
"@name and @age must be same length"
} else {
TRUE
}
})
Person("Hadley", age = c(30, 37))
alex <- Person("Alex", age = 30)
alex@age <- 1:10
validObject(alex)
# ?utils::person
# Definition of the Person class
setClass("Person",
slots = c(
age = "numeric",
given = "character",
family = "character",
role = "character",
email = "character",
comment = "character"
),
prototype = list(
age = NA_real_,
given = NA_character_,
family = NA_character_,
role = NA_character_,
email = NA_character_,
comment = NA_character_
)
)
# Helper to create instances of the Person class
Person <- function(given, family,
age = NA_real_,
role = NA_character_,
email = NA_character_,
comment = NA_character_) {
age <- as.double(age)
new("Person",
age = age,
given = given,
family = family,
role = role,
email = email,
comment = comment
)
}
# Validator to ensure that each slot is of length one
setValidity("Person", function(object) {
invalids <- c()
if (length(object@age)     != 1 ||
length(object@given)   != 1 ||
length(object@family)  != 1 ||
length(object@email)   != 1 ||
length(object@comment) != 1) {
invalids <- paste0("@name, @age, @given, @family, @email, ",
"@comment must be of length 1")
}
known_roles <- c(
NA_character_, "aut", "com", "cph", "cre", "ctb",
"ctr", "dtc", "fnd", "rev", "ths", "trl"
)
if (!all(object@role %in% known_roles)) {
paste(
"@role(s) must be one of",
paste(known_roles, collapse = ", ")
)
}
if (length(invalids)) return(invalids)
TRUE
})
setClass("Human")
new("Human")
setClass("Programmer", contains = "Human")
new("Programmer")
Programmer <- new("Programmer")
str(Programmer)
setClass("Factor",
slots = c(
data = "integer",
levels = "character",
ordered = "logical"
),
prototype = list(
data = integer(),
levels = character(),
ordered = FALSE
)
)
new("Factor", data = c(1L, 2L), levels = letters[1:3])
setClass("Date2",
slots = list(
data = "integer"
),
prototype = list(
data = integer()
)
)
new("Date2", data = 1L)
setClass("DataFrame",
slots = c(
data = "list",
row.names = "character"
),
prototype = list(
data = list(),
row.names = character(0)
)
)
new("DataFrame", data = list(a = 1, b = 2))
setGeneric("myGeneric", function(x) standardGeneric("myGeneric"))
# Don't do this!
setGeneric("myGeneric", function(x) {
standardGeneric("myGeneric")
})
setGeneric("myGeneric",
function(x, ..., verbose = TRUE) standardGeneric("myGeneric"),
signature = "x"
)
setMethod("myGeneric", "Person", function(x) {
# method implementation
})
args(getGeneric("show"))
setMethod("show", "Person", function(object) {
cat(is(object)[[1]], "\n",
"  Name: ", object@name, "\n",
"  Age:  ", object@age, "\n",
sep = ""
)
})
john
person_name <- function(x) x@name
setGeneric("name", function(x) standardGeneric("name"))
setMethod("name", "Person", function(x) x@name)
name(john)
setGeneric("name<-", function(x, value) standardGeneric("name<-"))
setMethod("name<-", "Person", function(x, value) {
x@name <- value
validObject(x)
x
})
name(john) <- "Jon Smythe"
name(john)
name(john) <- letters
setGeneric("age", function(x) standardGeneric("age"))
setGeneric("age<-", function(x, value) standardGeneric("age<-"))
setMethod("age", "Person", function(x) x@age)
setMethod("age<-", "Person", function(x, value) {
x@age <- value
validObject(x)
x
})
age(john) <- 50
age(john)
age(john) <- 50
setMethod("show", "Person", function(x, y) {
cat(x@name, "is", x@age, "years old")
})
knitr::include_graphics("diagrams/s4/multiple-multiple.png")
