#e3[c("x", "y")]
#Error in e3[c("x", "y")] :
#  object of type 'environment' is not subsettable
e3$xyz
#NULL
env_get(e3, "xyz")
#Error in `env_get()`:
#! Can't find `xyz` in environment.
#Backtrace:
# 1. rlang::env_get(e3, "xyz")
# Error in base::try(where, silent = TRUE) : object 'where' not found
env_get(e3, "xyz", default = NA)
env_poke(e3, "a", 100)
e3$a
env_bind(e3, a = 10, b = 20)
env_names(e3)
env_has(e3, "a")
e3$a <- NULL
env_has(e3, "a")
env_unbind(e3, "a")
env_has(e3, "a")
env_bind_lazy(current_env(), b = {Sys.sleep(1); 1})
system.time(print(b))
system.time(print(b))
env_bind_active(current_env(), z1 = function(val) runif(1))
z1
z1
env_bind(current_env(), b1 = {print('hi'); 1})
print('first')
print(b1)
print(b1)
env_bind_lazy(current_env(), b2 = {print('yo'); 2})
print('second')
print(b2)
print(b2)
env_bind_active(current_env(), b3 = function(){print('foo'); 3})
print('third')
print(b3)
print(b3)
#?delayedAssign()
#?makeActiveBinding()
knitr::include_graphics("diagrams/environments/recursive-1.png")
e7_2 <- env()
e7_2$loop <- e7_2
env_print(e7_2)
# Verify that it contains itself
lobstr::ref(e7_2)
knitr::include_graphics("diagrams/environments/recursive-2.png")
e7_2 <- env()
e7_3 <- env()
e7_3$dedoop <- e7_2
e7_2$loop <- e7_3
lobstr::ref(e7_2)
lobstr::ref(e7_3)
#?env_poke()
getAnywhere(env_poke)
new_env_poke <- function (env = caller_env(), nm, value, inherit = FALSE, create = !inherit)
{
if (env_has(env, nm)) {
abort(paste(nm, "is already assigned to a value."))
}
check_environment(env)
invisible(.Call(ffi_env_poke, env = env, nm = nm, values = value,
inherit = inherit, create = create))
}
# Test
#e3$b
#new_env_poke(e3, "b", 100)
rebind <- function(name, value, env = caller_env()) {
if (identical(env, empty_env())) {
stop("Can't find `", name, "`", call. = FALSE)
} else if (env_has(env, name)) {
env_poke(env, name, value)
} else {
rebind(name, value, env_parent(env))
}
}
rebind("a", 10)
a <- 5
rebind("a", 10)
a
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (env_has(env, name)) {
# Success case
env
} else {
# Recursive case
where(name, env_parent(env))
}
}
where("yyy")
x <- 5
where("x")
where("mean")
e4a <- env(empty_env(), a = 1, b = 2)
e4b <- env(e4a, x = 10, a = 11)
knitr::include_graphics("diagrams/environments/where-ex.png")
f <- function(..., env = caller_env()) {
if (identical(env, empty_env())) {
# base case
} else if (success) {
# success case
} else {
# recursive case
f(..., env = env_parent(env))
}
}
f2 <- function(..., env = caller_env()) {
while (!identical(env, empty_env())) {
if (success) {
# success case
return()
}
# inspect parent
env <- env_parent(env)
}
# base case
}
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (env_has(env, name)) {
# Success case
env
} else {
# Recursive case
where(name, env_parent(env))
}
}
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
# Test
e1a <- env(empty_env(), a = 1, b = 2)
e1b <- env(e1a, b = 10, c = 11)
e1c <- env(e1b, a = 12, d = 13)
lobstr::ref(e1a)
lobstr::ref(e1b)
lobstr::ref(e1c)
where("a", e1c)
new_where("a", e1c)
fget <- function(name, env = caller_env()) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
fget("mean")
#fget("meanx")
#Error: Could not find a function called meanx.
new_fget <- function(name, env = caller_env(),inherits = TRUE) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
if (inherits == FALSE) {
stop("inherits = FALSE.")
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
#new_fget("mean", inherits = FALSE)
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("mean")
#new_fget("meanx")
#Error: Could not find a function called meanx.
where
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (env_has(env, name)) {
# Success case
env
} else {
# Recursive case
where(name, env_parent(env))
}
}
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
# Test
e1a <- env(empty_env(), a = 1, b = 2)
e1b <- env(e1a, b = 3, c = 4)
e1c <- env(e1b, a = 5, d = 6)
lobstr::ref(e1a)
lobstr::ref(e1b)
lobstr::ref(e1c)
where("a", e1c)
new_where("a", e1c)
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
stop("finished!")
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
# Test
e1a <- env(empty_env(), a = 1, b = 2)
e1b <- env(e1a, b = 3, c = 4)
e1c <- env(e1b, a = 5, d = 6)
lobstr::ref(e1a)
lobstr::ref(e1b)
lobstr::ref(e1c)
where("a", e1c)
new_where("a", e1c)
where("a", e1c)
new_where("a", e1c)
new_where("a", e1c)
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
new_where("a", e1c)
new_fget <- function(name, env = caller_env(),inherits = TRUE) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
if (inherits == FALSE) {
stop("inherits = FALSE.")
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
#new_fget("mean", inherits = FALSE)
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("mean")
#new_fget("meanx")
#Error: Could not find a function called meanx.
new_fget("mean", inherits = FALSE)
new_fget <- function(name, env = caller_env(),inherits = TRUE) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
if (inherits == FALSE) {
stop("Could not find a function in current env.")
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
new_fget("mean", inherits = FALSE)
# Test
mean <- 10
fget("mean")
fget("meanx")
fget("sum")
# Test
mean <- 10
new_fget("mean", inherits = FALSE)
new_fget("mean")
new_fget("meanx")
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("sum")
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("sum", inherits = FALSE)
library(lobstr)
tracemem(e1)
knitr::include_graphics("diagrams/environments/search-path.png")
search()
search_envs()
library(rlang)
search()
search_envs()
knitr::include_graphics("diagrams/environments/search-path-2.png")
y <- 1
f <- function(x) x + y
fn_env(f)
knitr::include_graphics("diagrams/environments/binding.png")
knitr::include_graphics("diagrams/environments/calling.png")
ls
ls()
env_names()
?env_names()
rlang::env_names()
library(rlang)
rlang::env_names()
rlang::env_names()
env_names(current_env())
new_ls <- function(env = caller_env()) {
sort(env_names(env))
}
new_ls()
ls()
ls()
new_ls()
?ls
?env_names
ls(all.names = TRUE)
new_ls()
#test
ls(e1)
#test
ls(e1)
new_ls(e1)
library(rlang)
knitr::include_graphics("diagrams/environments/search-path.png")
library(rlang)
search()
search_envs()
knitr::include_graphics("diagrams/environments/search-path-2.png")
y <- 1
f <- function(x) x + y
fn_env(f)
knitr::include_graphics("diagrams/environments/binding.png")
e <- env()
e$g <- function() 1
knitr::include_graphics("diagrams/environments/binding-2.png")
sd
knitr::include_graphics("diagrams/environments/namespace-bind.png")
knitr::include_graphics("diagrams/environments/namespace-env.png")
knitr::include_graphics("diagrams/environments/namespace.png")
g <- function(x) {
if (!env_has(current_env(), "a")) {
message("Defining a")
a <- 1
} else {
a <- a + 1
}
a
}
g(10)
g(10)
h <- function(x) {
# 1.
a <- 2 # 2.
x + a
}
y <- h(1) # 3.
knitr::include_graphics("diagrams/environments/execution.png")
h2 <- function(x) {
a <- x * 2
current_env()
}
e <- h2(x = 10)
env_print(e)
fn_env(h2)
plus <- function(x) {
function(y) x + y
}
plus_one <- plus(1)
plus_one
knitr::include_graphics("diagrams/environments/closure.png")
plus_one(2)
knitr::include_graphics("diagrams/environments/closure-call.png")
search_envs()
env_parents(global_env())
f1 <- function(x1) {
f2 <- function(x2) {
f3 <- function(x3) {
x1 + x2 + x3
}
f3(3)
env_print()
}
f2(2)
env_print()
}
f1(1)
env_print()
knitr::include_graphics("diagrams/environments/Advanced_R_7.4.5_Exercises.png")
#?str
fget <- function(name, env = caller_env()) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(list(fun = obj, env = env))
}
}
}
# Recursive anyway
fget(name, env_parent(env))
}
fstr <- function(fun_name, env = caller_env()) {
if (!is.character(fun_name)) {
stop("`fun_name` should be a string.", call. = FALSE)
}
fun_env <- fget(fun_name, env)
list(
environment = fun_env$env,
namespace = fn_env(fun_env$fun)
)
}
# Test
fstr("mean")
f <- function(x) {
g(x = 2)
}
g <- function(x) {
h(x = 3)
}
h <- function(x) {
stop()
}
knitr::include_graphics("diagrams/environments/calling.png")
ls
ls()
env_names(current_env())
new_ls <- function(env = caller_env()) {
sort(env_names(env))
}
ls(all.names = TRUE)
new_ls()
#test
ls(e1)
#test
ls(e)
new_ls(e)
my_env <- new.env(parent = emptyenv())
my_env$a <- 1
get_a <- function() {
my_env$a
}
set_a <- function(value) {
old <- my_env$a
my_env$a <- value
invisible(old)
}
