purrr::pluck(x, "c", 1)
purrr::pluck(x, "c", 1, .default = NA)
x <- 1:5
x[c(1, 2)] <- c(101, 102)
x
#lapply: Apply a Function over a List or Vector
mtcars[] <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
str(mtcars)
mtcars <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
str(mtcars)
rm(mtcars)
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
id <- match(grades, info$grade)
id
info[id, ]
id <- match(grades, info$grade)
id
info[id, ]
df <- data.frame(x = c(1, 2, 3, 1, 2), y = 5:1, z = letters[1:5])
df
# Randomly reorder
df[sample(nrow(df)), ]
# Select 3 random rows
df[sample(nrow(df), 3), ]
# Select 6 bootstrap replicates
df[sample(nrow(df), 6, replace = TRUE), ]
x <- c("b", "c", "a")
order(x)
x[order(x)]
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
1:nrow(df)
df$n
rep(1:nrow(df), df$n)
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$z <- NULL
df
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[c("x", "y")]
names(df)
setdiff(names(df), "z")
# Performs set union, intersection, (asymmetric!) difference, equality and membership on two vectors.
df[setdiff(names(df), "z")]
x <- sample(10) < 4
which(x)
x <- sample(10) < 4
x
which(x)
sample(10)
which(x)
unwhich(which(x), 10)
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))
# X & Y <-> intersect(x, y)
x1 & y1
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))
# X & Y <-> intersect(x, y)
x1 & y1
intersect(x2, y2)
# X | Y <-> union(x, y)
x1 | y1
# X & !Y <-> setdiff(x, y)
x1 & !y1
setdiff(x2, y2)
# xor(X, Y) <-> setdiff(union(x, y), intersect(x, y))
xor(x1, y1)
union(x2, y2)
intersect(x2, y2)
setdiff(union(x2, y2), intersect(x2, y2))
which(y1)
which(x1)
-which(y1)
!y1
x1[!y1]
x <- 1:10
!y1
x[!y1]
!y1
x[!y1]
x[-which(y1)]
!y1
rep(10,10)
x <- rep(10,10)
!y1
x[!y1]
rep(FALSE,10)
y <- rep(FALSE,10)
x[!y]
x <- 1:10
!y1
x[!y1]
-which(y1)
x[-which(y1)]
y <- rep(FALSE,10)
x[!y]
x[-which(y)]
which(y)
which(y)
which(y1)
-which(y)
x[-which(y)]
library(tibble)
library(dplyr)
library(tidyverse)
mtcars
mtcars[order(names(mtcars))]
mtcars[sort(names(mtcars))]
colnames(data)
colnames(mtcars)
order(colnames(mtcars), decreasing = TRUE)
names(mtcars)
names(mtcars)
order(names(mtcars), decreasing = TRUE)
order(names(mtcars))
select(order(names(mtcars)))
order(names(mtcars))
order(names(mtcars))
mtcars %>% select(order(names(mtcars)))
ncol(mtcars)
sample(ncol(mtcars))
mtcars %>% select(sample(ncol(mtcars)))
sample(ncol(mtcars))
sample(nrow(mtcars))
sample(nrow(mtcars))
mtcars %>%
select(sample(ncol(mtcars))) %>%
order(sample(nrow(mtcars)))
mtcars %>%
select(sample(ncol(mtcars))) %>%
arrange(sample(nrow(mtcars)))
mtcars %>% sample_n(m)
start <- sample(nrow(mtcars) - m + 1, 1)
end <- start + m - 1
mtcars[start:end, , drop = FALSE]
mtcars %>% slice(start:end)
x <- TRUE
y <- if (x) 3
y
x <- FALSE
y <- if (x) 3
y
x <- NA
y <- if (x) 3
x <- 1:10
length(x)
if (length(x)) "not empty" else "empty"
x <- numeric()
length(x)
if (length(x)) "not empty" else "empty"
x
length(x)
if (length(x)) "not empty" else "empty"
x <- numeric()
out <- vector("list", length(x))
out
str(out)
length(x)
for (i in 1:length(x)) {
out[i] <- x[i] ^ 2
}
out
1^2
x <- numeric()
out <- vector("list", length(x))
out
str(out)
length(x)
x <- numeric()
out <- vector("list", length(x))
out
str(out)
length(x)
install.packages(c("BiocManager", "bit", "boot", "bslib", "callr", "car", "cli", "commonmark", "cpp11", "curl", "data.table", "devtools", "digest", "e1071", "evaluate", "fontawesome", "foreign", "gert", "ggmap", "ggplot2", "gtools", "htmltools", "isoband", "jpeg", "jsonlite", "knitr", "lifecycle", "lme4", "lubridate", "maptools", "markdown", "Matrix", "mgcv", "minqa", "modelr", "nlme", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "RcppEigen", "readr", "reproj", "rgdal", "rmarkdown", "roxygen2", "rpart", "rstatix", "s2", "sass", "sf", "shiny", "sp", "stringr", "sys", "testthat", "tidyselect", "units", "vctrs", "whisker", "wk", "xfun", "XML", "yaml", "zip"))
install.packages(c("BiocManager", "bit", "boot", "bslib", "callr", "car", "cli", "commonmark", "cpp11", "curl", "data.table", "devtools", "digest", "e1071", "evaluate", "fontawesome", "foreign", "gert", "ggmap", "ggplot2", "gtools", "htmltools", "isoband", "jpeg", "jsonlite", "knitr", "lifecycle", "lme4", "lubridate", "maptools", "markdown", "Matrix", "mgcv", "minqa", "modelr", "nlme", "openssl", "pkgbuild", "pkgload", "plotly", "plyr", "png", "processx", "proj4", "ps", "purrr", "ragg", "RcppEigen", "readr", "reproj", "rgdal", "rmarkdown", "roxygen2", "rpart", "rstatix", "s2", "sass", "sf", "shiny", "sp", "stringr", "sys", "testthat", "tidyselect", "units", "vctrs", "whisker", "wk", "xfun", "XML", "yaml", "zip"))
install.packages("cli")
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
`second<-` <- function(x, value) {
x[2] <- value
x
}
match.fun(anova)
match.fun(Anova)
library(car)
match.fun(Anova)
identical(anova, Anova)
identical(anova(), Anova())
identical(anova, Anova)
Anova
function(x) 3()
(function(x) 3)()
function(x) 3()
(function(x) 3)()
function1 <- function(x) 3()
function1()
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs) #
?mget
str(funs)
?map
?map_int
library(purrr)
?map
?map_int
library(purrr)
?map
?map_int
n_args <- funs %>%
map(formals) %>%
map_int(length)
str(n_args)
n_args %>%
which.max()
funs %>%
map(formals)
funs %>%
map(formals) %>%
map_int(length)
n_args %>%
which.max()
fun.args <- sapply(funs, function(x) length(formals(x)))
names(funs)[which.max(fun.args)]
sum(n_args == 0)
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
pri <- Filter(is.primitive, objs)
str(pri)
length(pri)
(function(x) 3)()
?mget
randomise <- function(f) f(runif(1e3))
randomise(mean)
randomise(mean)
randomise(sum)
library(purrr)
triple <- function(x) x * 3
map(1:3, triple)
knitr::include_graphics("diagrams/functionals/map.png")
simple_map <- function(x, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], ...)
}
out
}
# map_chr() always returns a character vector
map_chr(mtcars, typeof)
# map_lgl() always returns a logical vector
map_lgl(mtcars, is.double)
# map_int() always returns a integer vector
n_unique <- function(x) length(unique(x))
map_int(mtcars, n_unique)
# map_dbl() always returns a double vector
map_dbl(mtcars, mean)
knitr::include_graphics("diagrams/functionals/map-list.png")
pair <- function(x) c(x, x)
map_dbl(1:2, pair)
map_dbl(1:2, as.character)
map(1:2, pair)
map(1:2, as.character)
map_dbl(mtcars, function(x) length(unique(x)))
map_dbl(mtcars, ~ length(unique(.x)))
as_mapper(~ length(unique(.x)))
x <- map(1:3, ~ runif(2))
str(x)
x <- list(
list(-1, x = 1, y = c(2), z = "a"),
list(-2, x = 4, y = c(5, 6), z = "b"),
list(-3, x = 8, y = c(9, 10, 11))
)
# Select by name
map_dbl(x, "x")
# Or by position
map_dbl(x, 1)
# Or by both
map_dbl(x, list("y", 1))
# You'll get an error if a component doesn't exist:
map_chr(x, "z")
# Unless you supply a .default value
map_chr(x, "z", .default = NA)
x <- list(1:5, c(1:10, NA))
map_dbl(x, ~ mean(.x, na.rm = TRUE))
map_dbl(x, mean, na.rm = TRUE)
knitr::include_graphics("diagrams/functionals/map-arg.png")
knitr::include_graphics("diagrams/functionals/map-arg-recycle.png")
plus <- function(x, y) x + y
x <- c(0, 0, 0, 0)
map_dbl(x, plus, runif(1))
map_dbl(x, ~ plus(.x, runif(1)))
boostrap_summary <- function(x, f) {
f(sample(x, replace = TRUE))
}
simple_map(mtcars, boostrap_summary, f = mean)
knitr::include_graphics("diagrams/functionals/map-arg-flipped.png")
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
map_dbl(trims, ~ mean(x, trim = .x))
map_dbl(trims, function(trim) mean(x, trim = trim))
map_dbl(trims, mean, x = x)
as_mapper(1)
as_mapper(c("a", "b", "c"))
as_mapper(list(1, "a", 2))
as_mapper(list(1, attr_getter("a")))
map(1:3, ~ runif(2))
as_mapper(~ runif(2))
map(1:3, runif(2))
as_mapper(runif(2))
mtcars
str(mtcars)
map_dbl(mtcars, sd, na.rm = TRUE)
# library(help = "datasets")
CO2
str(CO2)
CO2_numeric <- map_lgl(CO2, is.numeric)
CO2_numeric
map_dbl(CO2[CO2_numeric], sd, na.rm = TRUE)
CO2_factor <- map_lgl(CO2, is.factor)
CO2_factor
map_int(CO2[CO2_factor], ~ length(unique(.x)))
trials <- map(1:100, ~ t.test(rpois(10, 10), rpois(7, 10)))
library(ggplot2)
trials_p_value <- data.frame(p_value = map_dbl(trials, "p.value"))
trials_p_value
str(trials_p_value)
trials_p_value %>%
ggplot(aes(x = p_value, fill = p_value < 0.05))+
geom_histogram(binwidth = 0.01)
x <- list(
list(1, c(3, 9)),
list(c(3, 6), 7, c(4, 7, 6))
)
triple <- function(x) x * 3
map(x, map, .f = triple)
map(x, map, triple)
map(x, ~ map(.x, triple))
formulas <- list(
mpg ~ disp,
mpg ~ I(1 / disp),
mpg ~ disp + wt,
mpg ~ I(1 / disp) + wt
)
str(mtcars)
models <- map(formulas, lm, data = mtcars)
models
bootstrap <- function(df) {
df[sample(nrow(df), replace = TRUE), , drop = FALSE]
}
bootstraps <- map(1:10, ~ bootstrap(mtcars))
summary(bootstraps)
bootstraps_models <- map(bootstraps, ~ lm(mpg ~ disp, data = .x))
summary(bootstraps_models)
map(bootstraps_models, summary) %>% str()
model_summarys <- map(bootstraps_models, summary)
data.frame(R_squared = map_dbl(model_summarys, "r.squared"), row.names = c(1:10))
by_cyl <- split(mtcars, mtcars$cyl)
summary(by_cyl)
by_cyl %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map(coef) %>%
map_dbl(2)
by_cyl %>%
lapply(function(data) lm(mpg ~ wt, data = data)) %>%
lapply(coef) %>%
vapply(function(x) x[[2]], double(1))
models <- lapply(by_cyl, function(data) lm(mpg ~ wt, data = data))
vapply(models, function(x) coef(x)[[2]], double(1))
slopes <- double(length(by_cyl))
for (i in seq_along(by_cyl)) {
model <- lm(mpg ~ wt, data = by_cyl[[i]])
slopes[[i]] <- coef(model)[[2]]
}
slopes
df <- data.frame(
x = 1:3,
y = 6:4
)
map(df, ~ .x * 2)
modify(df, ~ .x * 2)
df <- modify(df, ~ .x * 2)
simple_modify <- function(x, f, ...) {
for (i in seq_along(x)) {
x[[i]] <- f(x[[i]], ...)
}
x
}
xs <- map(1:8, ~ runif(10))
xs[[1]][[1]] <- NA
ws <- map(1:8, ~ rpois(10, 5) + 1)
map_dbl(xs, mean)
map_dbl(xs, weighted.mean, w = ws)
knitr::include_graphics("diagrams/functionals/map-arg-recycle.png")
map2_dbl(xs, ws, weighted.mean)
knitr::include_graphics("diagrams/functionals/map2.png")
map2_dbl(xs, ws, weighted.mean, na.rm = TRUE)
knitr::include_graphics("diagrams/functionals/map2-arg.png")
simple_map2 <- function(x, y, f, ...) {
out <- vector("list", length(x))
for (i in seq_along(x)) {
out[[i]] <- f(x[[i]], y[[i]], ...)
}
out
}
knitr::include_graphics("diagrams/functionals/map2-recycle.png")
welcome <- function(x) {
cat("Welcome ", x, "!\n", sep = "")
}
names <- c("Hadley", "Jenny")
# As well as generate the welcomes, it also shows
# the return value of cat()
map(names, welcome)
walk(names, welcome)
knitr::include_graphics("diagrams/functionals/walk.png")
knitr::include_graphics("diagrams/functionals/walk2.png")
temp <- tempfile()
dir.create(temp)
cyls <- split(mtcars, mtcars$cyl)
paths <- file.path(temp, paste0("cyl-", names(cyls), ".csv"))
walk2(cyls, paths, write.csv)
dir(temp)
imap_chr(iris, ~ paste0("The first value of ", .y, " is ", .x[[1]]))
x <- map(1:6, ~ sample(1000, 10))
imap_chr(x, ~ paste0("The highest value of ", .y, " is ", max(.x)))
knitr::include_graphics("diagrams/functionals/pmap.png")
pmap_dbl(list(xs, ws), weighted.mean)
pmap_dbl(list(xs, ws), weighted.mean, na.rm = TRUE)
knitr::include_graphics("diagrams/functionals/pmap-arg.png")
trims <- c(0, 0.1, 0.2, 0.5)
x <- rcauchy(1000)
pmap_dbl(list(trim = trims), mean, x = x)
params <- tibble::tribble(
~ n, ~ min, ~ max,
1L,     0,     1,
2L,    10,   100,
3L,   100,  1000
)
pmap(params, runif)
knitr::include_graphics("diagrams/functionals/pmap-3.png")
mtcars
str(mtcars)
modify(mtcars, 1)
modify(mtcars, 1) %>% str()
temp <- tempfile()
dir.create(temp)
cyls <- split(mtcars, mtcars$cyl)
names(cyls) <- file.path(temp, paste0("cyl-", names(cyls), ".csv"))
iwalk(cyls, ~ write.csv(.x, .y))
temp <- tempfile()
dir.create(temp)
cyls <- split(mtcars, mtcars$cyl)
cyls <- set_names(cyls, file.path(temp, paste0("cyl-", names(cyls), ".csv")))
iwalk(cyls, ~ write.csv(.x, .y))
temp <- tempfile()
dir.create(temp)
mtcars %>%
split(mtcars$cyl) %>%
set_names(~ file.path(temp, paste0("cyl-", .x, ".csv"))) %>%
iwalk(~ write.csv(.x, .y))
trans <- list(
disp = function(x) x * 0.0163871,
am = function(x) factor(x, labels = c("auto", "manual"))
)
nm <- names(trans)
mtcars[nm] <- map2(trans, mtcars[nm], function(f, var) f(var))
trans <- list(
disp = function(x) x * 0.0163871,
am = function(x) factor(x, labels = c("auto", "manual"))
)
nm <- names(trans)
mtcars[nm] <- map2(trans, mtcars[nm], ~ .x(.y))
temp <- tempfile()
dir.create(temp)
cyls <- split(mtcars, mtcars$cyl)
paths <- file.path(temp, paste0("cyl-", names(cyls), ".csv"))
map2(cyls, paths, write.csv)
map(1:3)
map(1:3, runif(2))
map(1:3, runif(1))
map(1:3, 0.22)
as_mapper(1:3, runif(2))
?purrr::pluck()
