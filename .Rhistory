str(b)
obj_size(b)
obj_size(a)
obj_size(b)
obj_size(a, b)
v <- c(1, 2, 3)
tracemem(v)
knitr::include_graphics("diagrams/name-value/v-inplace-1.png")
v[[3]] <- 4
knitr::include_graphics("diagrams/name-value/v-inplace-2.png")
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
str(x)
medians <- vapply(x, median, numeric(1))
str(medians)
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))
for (i in seq_along(medians)) {
x[[i]] <- x[[i]] - medians[[i]]
}
for (i in 1:5) {
y[[i]] <- y[[i]] - medians[[i]]
}
#> tracemem[0x7f80c5c3de20 -> 0x7f80c48de210]:
e1 <- rlang::env(a = 1, b = 2, c = 3)
e2 <- e1
knitr::include_graphics("diagrams/name-value/e-modify-1.png")
e1$c <- 4
e2$c
knitr::include_graphics("diagrams/name-value/e-modify-2.png")
e <- rlang::env()
e$self <- e
ref(e)
knitr::include_graphics("diagrams/name-value/e-self.png")
x <- list()
tracemem(x)
x[[1]] <- x
untracemem(x)
ref(x)
nc = 100
x <- data.frame(matrix(runif(nc * 1e4), ncol = nc))
medians <- vapply(x, median, numeric(1))
normalization_slow <- function(x, medians) {
for (i in seq_along(medians)) {
x[[i]] <- x[[i]] - medians[[i]]
}
x
}
normalization_fast <- function(x, medians) {
y <- as.list(x)
for (i in seq_along(medians)) {
y[[i]] <- y[[i]] - medians[[i]]
}
list2DF(y)
}
library(bench)
bench::mark(normalization_slow(x, medians))
bench::mark(normalization_fast(x, medians))
create_random_df <- function(nrow, ncol) {
random_matrix <- matrix(runif(nrow * ncol), nrow = nrow)
as.data.frame(random_matrix)
}
create_random_df(2, 2)
benchmark_medians <- function(ncol) {
df <- create_random_df(nrow = 1e4, ncol = ncol)
medians <- vapply(df, median, numeric(1), USE.NAMES = FALSE)
bench::mark(
"data frame" = normalization_slow(df, medians),
"list" = normalization_fast(df, medians),
time_unit = "ms"
)
}
benchmark_medians(1000)
results <- bench::press(
ncol = c(1, 10, 50, 100, 250, 300, 400, 500, 750, 1000),
benchmark_medians(ncol)
)
library(ggplot2)
ggplot(
results,
aes(ncol, median, col = attr(expression, "description"))
) +
geom_point(size = 2) +
geom_smooth() +
labs(
x = "Number of Columns",
y = "Execution Time (ms)",
colour = "Data Structure"
) +
theme(legend.position = "top")
# tracemem(e1)
# Error in tracemem(e1) :
#  'tracemem' is not useful for promise and environment objects
x <- 1:3
knitr::include_graphics("diagrams/name-value/unbinding-1.png")
x <- 2:4
knitr::include_graphics("diagrams/name-value/unbinding-2.png")
rm(x)
knitr::include_graphics("diagrams/name-value/unbinding-3.png")
gc()
mem_used()
df <- data.frame(runif(3), runif(3))
names(df) <- c(1, 2)
df$`3` <- df$`1` + df$`2`
x <- runif(1e6)
y <- list(x, x, x)
obj_size(y)
library(rlang)
e1 <- env(
a = FALSE,
b = "a",
c = 2.3,
d = 1:3,
)
knitr::include_graphics("diagrams/environments/bindings.png")
e1$d <- e1
knitr::include_graphics("diagrams/environments/loop.png")
e1
env_print(e1)
env_names(e1)
names(e1)
identical(global_env(), current_env())
#global_env() == current_env()
global_env()
current_env()
globalenv()
environment()
e2a <- env(d = 4, e = 5)
e2b <- env(e2a, a = 1, b = 2, c = 3)
knitr::include_graphics("diagrams/environments/parents.png")
env_parent(e2b)
env_parent(e2a)
env_print(e2b)
env_print(e2a)
e2c <- env(empty_env(), d = 4, e = 5)
e2d <- env(e2c, a = 1, b = 2, c = 3)
knitr::include_graphics("diagrams/environments/parents-empty.png")
env_parents(e2b)
env_parents(e2d)
env_parents(e2b, last = empty_env())
parent.env(e2b)
parent.env(e2d)
x <- 0
f <- function() {
x <<- 1
}
f()
x
e3 <- env(x = 1, y = 2)
e3$x
e3$z <- 3
e3[["z"]]
e3
env_print(e3)
#e3[[1]]
#Error in e3[[1]] : wrong arguments for subsetting an environment
#e3[c("x", "y")]
#Error in e3[c("x", "y")] :
#  object of type 'environment' is not subsettable
e3$xyz
#NULL
env_get(e3, "xyz")
#Error in `env_get()`:
#! Can't find `xyz` in environment.
#Backtrace:
# 1. rlang::env_get(e3, "xyz")
# Error in base::try(where, silent = TRUE) : object 'where' not found
env_get(e3, "xyz", default = NA)
env_poke(e3, "a", 100)
e3$a
env_bind(e3, a = 10, b = 20)
env_names(e3)
env_has(e3, "a")
e3$a <- NULL
env_has(e3, "a")
env_unbind(e3, "a")
env_has(e3, "a")
env_bind_lazy(current_env(), b = {Sys.sleep(1); 1})
system.time(print(b))
system.time(print(b))
env_bind_active(current_env(), z1 = function(val) runif(1))
z1
z1
env_bind(current_env(), b1 = {print('hi'); 1})
print('first')
print(b1)
print(b1)
env_bind_lazy(current_env(), b2 = {print('yo'); 2})
print('second')
print(b2)
print(b2)
env_bind_active(current_env(), b3 = function(){print('foo'); 3})
print('third')
print(b3)
print(b3)
#?delayedAssign()
#?makeActiveBinding()
knitr::include_graphics("diagrams/environments/recursive-1.png")
e7_2 <- env()
e7_2$loop <- e7_2
env_print(e7_2)
# Verify that it contains itself
lobstr::ref(e7_2)
knitr::include_graphics("diagrams/environments/recursive-2.png")
e7_2 <- env()
e7_3 <- env()
e7_3$dedoop <- e7_2
e7_2$loop <- e7_3
lobstr::ref(e7_2)
lobstr::ref(e7_3)
#?env_poke()
getAnywhere(env_poke)
new_env_poke <- function (env = caller_env(), nm, value, inherit = FALSE, create = !inherit)
{
if (env_has(env, nm)) {
abort(paste(nm, "is already assigned to a value."))
}
check_environment(env)
invisible(.Call(ffi_env_poke, env = env, nm = nm, values = value,
inherit = inherit, create = create))
}
# Test
#e3$b
#new_env_poke(e3, "b", 100)
rebind <- function(name, value, env = caller_env()) {
if (identical(env, empty_env())) {
stop("Can't find `", name, "`", call. = FALSE)
} else if (env_has(env, name)) {
env_poke(env, name, value)
} else {
rebind(name, value, env_parent(env))
}
}
rebind("a", 10)
a <- 5
rebind("a", 10)
a
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (env_has(env, name)) {
# Success case
env
} else {
# Recursive case
where(name, env_parent(env))
}
}
where("yyy")
x <- 5
where("x")
where("mean")
e4a <- env(empty_env(), a = 1, b = 2)
e4b <- env(e4a, x = 10, a = 11)
knitr::include_graphics("diagrams/environments/where-ex.png")
f <- function(..., env = caller_env()) {
if (identical(env, empty_env())) {
# base case
} else if (success) {
# success case
} else {
# recursive case
f(..., env = env_parent(env))
}
}
f2 <- function(..., env = caller_env()) {
while (!identical(env, empty_env())) {
if (success) {
# success case
return()
}
# inspect parent
env <- env_parent(env)
}
# base case
}
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (env_has(env, name)) {
# Success case
env
} else {
# Recursive case
where(name, env_parent(env))
}
}
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
# Test
e1a <- env(empty_env(), a = 1, b = 2)
e1b <- env(e1a, b = 10, c = 11)
e1c <- env(e1b, a = 12, d = 13)
lobstr::ref(e1a)
lobstr::ref(e1b)
lobstr::ref(e1c)
where("a", e1c)
new_where("a", e1c)
fget <- function(name, env = caller_env()) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
fget("mean")
#fget("meanx")
#Error: Could not find a function called meanx.
new_fget <- function(name, env = caller_env(),inherits = TRUE) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
if (inherits == FALSE) {
stop("inherits = FALSE.")
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
#new_fget("mean", inherits = FALSE)
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("mean")
#new_fget("meanx")
#Error: Could not find a function called meanx.
where
where <- function(name, env = caller_env()) {
if (identical(env, empty_env())) {
# Base case
stop("Can't find ", name, call. = FALSE)
} else if (env_has(env, name)) {
# Success case
env
} else {
# Recursive case
where(name, env_parent(env))
}
}
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
# Test
e1a <- env(empty_env(), a = 1, b = 2)
e1b <- env(e1a, b = 3, c = 4)
e1c <- env(e1b, a = 5, d = 6)
lobstr::ref(e1a)
lobstr::ref(e1b)
lobstr::ref(e1c)
where("a", e1c)
new_where("a", e1c)
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
stop("finished!")
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
# Test
e1a <- env(empty_env(), a = 1, b = 2)
e1b <- env(e1a, b = 3, c = 4)
e1c <- env(e1b, a = 5, d = 6)
lobstr::ref(e1a)
lobstr::ref(e1b)
lobstr::ref(e1c)
where("a", e1c)
new_where("a", e1c)
where("a", e1c)
new_where("a", e1c)
new_where("a", e1c)
new_where <- function(name, env = caller_env(), results = list()) {
if (identical(env, empty_env())) {
# Base case
results
} else {
if (env_has(env, name)) {
# Success case
results <- c(results, env)
}
# Recursive anyway
new_where(name, env_parent(env), results)
}
}
new_where("a", e1c)
new_fget <- function(name, env = caller_env(),inherits = TRUE) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
if (inherits == FALSE) {
stop("inherits = FALSE.")
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
#new_fget("mean", inherits = FALSE)
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("mean")
#new_fget("meanx")
#Error: Could not find a function called meanx.
new_fget("mean", inherits = FALSE)
new_fget <- function(name, env = caller_env(),inherits = TRUE) {
# Base case
if (identical(env, emptyenv())) {
stop("Could not find a function called ", name, ".", call. = FALSE)
}
# Success case
else{
if (env_has(env, name)) {
obj <- env_get(env, name)
if (is.function(obj)) {
return(obj)
}
}
if (inherits == FALSE) {
stop("Could not find a function in current env.")
}
}
# Recursive anyway
fget(name, env_parent(env))
}
# Test
mean <- 10
new_fget("mean", inherits = FALSE)
# Test
mean <- 10
fget("mean")
fget("meanx")
fget("sum")
# Test
mean <- 10
new_fget("mean", inherits = FALSE)
new_fget("mean")
new_fget("meanx")
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("sum")
#Error in new_fget("mean", inherits = FALSE) : inherits = FALSE.
new_fget("sum", inherits = FALSE)
library(lobstr)
tracemem(e1)
knitr::include_graphics("diagrams/environments/search-path.png")
search()
search_envs()
library(rlang)
search()
search_envs()
knitr::include_graphics("diagrams/environments/search-path-2.png")
y <- 1
f <- function(x) x + y
fn_env(f)
knitr::include_graphics("diagrams/environments/binding.png")
