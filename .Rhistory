j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
rlang::abort(f(j()))
rlang::last_trace()
knitr::include_graphics("screenshots/debug-toolbar.png")
f <- function(a) {
cat("f()\n")
g(a)
}
g <- function(b) {
cat("g()\n")
cat("b =", b, "\n")
h(b)
}
h <- function(c) {
cat("i()\n")
i(c)
}
f(10)
f <- function() g()
g <- function() message("Hi!")
f()
rlang::with_abort(f(), "message")
rlang::last_trace()
f("a")
base::traceback()
options(error = browser); f()
options(error = recover); f()
options(error = NULL)
rlang::abort(f("a"));
rlang::last_trace()
f("a")
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
f("a")
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
rlang::abort(f(j()))
rlang::last_trace()
rlang::last_trace()
f(j())
rlang::last_trace(f(j()))
abort(f(j()))
rlang::abort(f(j()))
rlang::last_trace()
rlang::last_error()
rlang::abort(f(j()))
rlang::last_error()
rlang::abort(f(j()))
rlang::last_error(f(j()))
rlang::abort(f(j()))
rlang::last_error()
rlang::abort(f(j()))
last_trace(drop = NULL)
last_trace(abort(f(j())))
rlang::last_trace(abort(f(j())))
rlang::last_trace(abort(f(j())))
rlang::abort(f(j()))
rlang::abort(f(j()))
rlang::last_trace()
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::entrace
f(j())
f(j())
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
# options(
#   rlang_backtrace_on_error = "full",
#   error = rlang::entrace
# )
rlang::abort(f(j()))
rlang::last_trace()
knitr::include_graphics("screenshots/debug-toolbar.png")
f <- function(a) {
cat("f()\n")
g(a)
}
g <- function(b) {
cat("g()\n")
cat("b =", b, "\n")
h(b)
}
h <- function(c) {
cat("i()\n")
i(c)
}
f(10)
f <- function() g()
g <- function() message("Hi!")
f()
rlang::with_abort(f(), "message")
rlang::last_trace()
f(j())
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
rlang::abort(f(j()))
rlang::last_trace()
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
f(j())
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
f("a")
library(rlang)
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::abort(f(j()))
rlang::last_trace()
knitr::include_graphics("screenshots/debug-toolbar.png")
f <- function(a) {
cat("f()\n")
g(a)
}
g <- function(b) {
cat("g()\n")
cat("b =", b, "\n")
h(b)
}
h <- function(c) {
cat("i()\n")
i(c)
}
f(10)
f <- function() g()
g <- function() message("Hi!")
f()
rlang::with_abort(f(), "message")
rlang::last_trace()
rlang::abort(f(j()))
rlang::last_trace()
f(j())
rlang::with_abort(f(j()))
rlang::last_trace()
f(j())
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::with_abort(f(j()))
rlang::last_trace()
knitr::include_graphics("screenshots/debug-toolbar.png")
f <- function(a) {
cat("f()\n")
g(a)
}
g <- function(b) {
cat("g()\n")
cat("b =", b, "\n")
h(b)
}
h <- function(c) {
cat("i()\n")
i(c)
}
f(10)
f <- function() g()
g <- function() message("Hi!")
f()
rlang::with_abort(f(), "message")
rlang::last_trace()
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
f(j())
rlang::with_abort(f(j()))
rlang::last_trace()
rlang::abort(f(j()))
f(j())
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
traceback()
#> 5: stop("`d` must be numeric", call. = FALSE) at debugging.R#6
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f("a")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::abort(f(j()))
rlang::last_trace()
f(j()
f(j())
rlang::abort(f(j()))
rlang::last_trace()
f(j())
f(j())
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
f(j())
traceback()
rlang::entrace
f(j())
library(profvis)
library(bench)
x <- runif(100)
(lb <- bench::mark(
sqrt(x),
x ^ 0.5
))
plot(lb)
lb[c("expression", "min", "median", "itr/sec", "n_gc")]
n <- 1e6
system.time(for (i in 1:n) sqrt(x)) / n
system.time(for (i in 1:n) x ^ 0.5) / n
n <- 1e6
x <- runif(100)
system.time(for (i in 1:n)
sqrt(x)) / n
system.time(for (i in 1:n)
x ^ 0.5) / n
n <- 1e6
x <- runif(100)
bench_df <- bench::mark(
sqrt(x),
x ^ 0.5,
iterations = n
)
bench_df
t1_bench <- mean(unlist(bench_df[1, "time"]))
t2_bench <- mean(unlist(bench_df[2, "time"]))
t1_systime <- system.time(for (i in 1:n) sqrt(x)) / n
t2_systime <- system.time(for (i in 1:n) x ^ 0.5) / n
# Compare the results
t1_systime["elapsed"]
t1_bench
t2_systime["elapsed"]
t2_bench
?proc.time
x ^ (1 / 2)
exp(log(x) / 2)
x ^ (1 / 2)
exp(log(x) / 2)
x <- runif(100)
benchmark_results <- bench::mark(
sqrt(x),
x^0.5,
x^(1 / 2),
exp(log(x) / 2)
)
sorted_results <- benchmark_results[order(benchmark_results$median), ]
sorted_results
sorted_results <- benchmark_results[benchmark_results$median, ]
sorted_results <- benchmark_results[(benchmark_results$median), ]
sorted_results <- benchmark_results[print(benchmark_results$median), ]
sorted_results
benchmark_results
x <- runif(100)
benchmark_results <- bench::mark(
sqrt(x),
x^0.5,
x^(1 / 2),
exp(log(x) / 2)
)
benchmark_results
x <- runif(100)
benchmark_results <- bench::mark(
sqrt(x),
x^0.5,
x^(1 / 2),
exp(log(x) / 2)
)
benchmark_results
profvis::profvis(f())
num <- function(x) format(round(x), big.mark = ",", scientific = FALSE)
ns <- function(x) paste0(num(round(unclass(x) * 1e9, -1)), " ns")
library(profvis)
library(bench)
f <- function() {
pause(0.1)
g()
h()
}
g <- function() {
pause(0.1)
h()
}
h <- function() {
pause(0.1)
}
knitr::include_graphics("screenshots/performance/flamegraph.png")
knitr::include_graphics("screenshots/performance/info.png")
knitr::include_graphics("screenshots/performance/tree.png")
profvis({x <- integer()
for (i in 1:1e4) {
x <- c(x, i)
}})
knitr::include_graphics("screenshots/performance/memory.png")
profvis({
i <- function() {
pause(0.1)
10
}
j <- function(x) {
x + 10
}
j(i())
})
profvis({
i <- function() {
pause(0.1)
10
}
j <- function(x) {
x + 10
}
force(j(i()))
})
f <- function(n = 1e5) {
x <- rep(1, n)
rm(x)
}
profvis::profvis(f())
