simple_reduce(integer(), sum, 1)
simple_reduce(1, sum, 1)
simple_reduce <- function(x, f, default) {
if (length(x) == 0L)
return(default)
#stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
#stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
integer()
simple_reduce(integer(), sum, 1)
simple_reduce(1, sum, 1)
simple_reduce(c(1:5), sum, 1)
simple_reduce <- function(x, f) {
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum, 1)
simple_reduce <- function(x, f) {
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce <- function(x, f) {
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum, 1)
simple_reduce(c(1:5), sum)
simple_reduce(1, sum)
integer()
simple_reduce(integer(), sum)
simple_reduce(c(1:5), sum)
simple_reduce <- function(x, f, default) {
if (length(x) == 0L)
return(default)
stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce <- function(x, f, default=NULL) {
if (length(x) == 0L)
return(default)
stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L)
return(default)
stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
reduce
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
#stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(1, sum, 1)
integer()
simple_reduce(integer(), sum, 1)
simple_reduce(1, sum)
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
#stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
#stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(1, sum)
simple_reduce(1, sum, 1)
integer()
simple_reduce(integer(), sum, 1)
integer()
simple_reduce(integer(), sum)
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
#stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
out
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(1, sum)
simple_reduce(1, sum, 1)
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
#stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(1, sum)
simple_reduce(1, sum, 1)
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
#stop("x is length 0")
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
stop("x is length 1")
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce <- function(x, f, default = default) {
if (length(x) == 0L)
return(default)
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
integer()
simple_reduce(integer(), sum)
integer()
simple_reduce(integer(), sum, 1)
simple_reduce <- function(x, f, default) {
if (length(x) == 0L)
return(default)
if (length(x) == 1L)
out <- f(default, x[[1]])
return(out)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
integer()
simple_reduce(integer(), sum)
integer()
simple_reduce(integer(), sum, 1)
simple_reduce(1, sum, 1)
simple_reduce(1, sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(c(1:5), sum)
simple_reduce(integer(), sum, 1)
simple_reduce(integer(), sum)
simple_reduce(1, sum)
simple_reduce <- function(x, f, default) {
if (length(x) == 0L)
return(default)
if (length(x) == 1L)
out <- f(default, x[[1L]])
return(out)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(1, sum)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L & is.NULL(default) = TRUE)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L & is.NULL(default) == TRUE)
return(default)
if (length(x) == 0L & is.NULL(default) == FALSE)
stop("x is length 0")
if (length(x) == 1L & is.NULL(default) == TRUE)
out <- f(default, x)
return(out)
if (length(x) == 1L & is.NULL(default) == FALSE)
return(x)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L & is.null(default) == TRUE)
return(default)
if (length(x) == 0L & is.null(default) == FALSE)
stop("x is length 0")
if (length(x) == 1L & is.null(default) == TRUE)
out <- f(default, x)
return(out)
if (length(x) == 1L & is.null(default) == FALSE)
return(x)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(1, sum)
simple_reduce(1, sum, 1)
simple_reduce(1, sum, 1)
simple_reduce(integer(), sum, 1)
simple_reduce(integer(), sum)
simple_reduce(integer(), sum)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L & is.null(default) == TRUE)
return(default)
if (length(x) == 0L & is.null(default) == FALSE)
stop("x is length 0")
if (length(x) == 1L & is.null(default) == TRUE)
return(x)
if (length(x) == 1L & is.null(default) == FALSE)
out <- f(default, x)
return(out)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(1, sum)
simple_reduce(1, sum, 1)
simple_reduce(integer(), sum, 1)
simple_reduce(integer(), sum)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L & is.null(default) == TRUE)
return(default)
if (length(x) == 0L & is.null(default) == FALSE)
stop("x is length 0")
if (length(x) == 1L & is.null(default) == TRUE)
return(x[[1]])
if (length(x) == 1L & is.null(default) == FALSE)
out <- f(default, x)
return(out)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(integer(), sum)
simple_reduce <- function(x, f, default = NULL) {
if (length(x) == 0L & is.null(default) == TRUE)
stop("x is length 0")
if (length(x) == 0L & is.null(default) == FALSE)
return(default)
if (length(x) == 1L & is.null(default) == TRUE)
return(x)
if (length(x) == 1L & is.null(default) == FALSE)
out <- f(default, x)
return(out)
out <- x[[1]]
for (i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
simple_reduce(c(1:5), sum)
simple_reduce(c(1:5), sum, 1)
simple_reduce(1, sum)
simple_reduce(1, sum)
simple_reduce(1, sum, 1)
simple_reduce(1, sum, 1)
simple_reduce(integer(), sum, 1)
simple_reduce(integer(), sum)
span
span()
rle()
?rle()
x <- rev(rep(6:10, 1:5))
str(x)
rle(x)
x
x <- rev(rep(6:10, 1:5))
str(x)
x
span <- function(x, f) {
idx <- unname(map_lgl(x, ~ f(.x)))
rle <- rle(idx)
# # Check if the predicate is never true
# if (!any(rle$values)) {
#   return(integer(0))
# }
#
# # Find the length of the longest sequence of true values
# longest <- max(rle$lengths[rle$values])
# # Find the positition of the (first) longest run in rle
# longest_idx <- which(rle$values & rle$lengths == longest)[1]
#
# # Add up all lengths in rle before the longest run
# ind_before_longest <- sum(rle$lengths[seq_len(longest_idx - 1)])
#
# out_start <- ind_before_longest + 1L
# out_end <- ind_before_longest + longest
# out_start:out_end
}
# Check that it works
span(c(0,  0,  0,  0,  0), is.na)
#> integer(0)
span(c(NA, 0,  0,  0,  0), is.na)
#> [1] 1
span(c(NA, 0, NA, NA, NA), is.na)
col3 <- 750+ 100*rt(1500, df = 3)
breaks <- factor(cut(col3, breaks = 360+5*(0:155)))
z <- table(breaks)
z[1:5] # The names are larger than the data ...
barplot(unname(z), axes = FALSE)
unname(z)
z <- table(breaks)
z[1:5] # The names are larger than the data ...
str(unname(z))
span <- function(x, f) {
idx <- unname(map_lgl(x, ~ f(.x)))
rle <- rle(idx)
# Check if the predicate is never true
if (!any(rle$values)) {
return(integer(0))
}
# Find the length of the longest sequence of true values
longest <- max(rle$lengths[rle$values])
# Find the positition of the (first) longest run in rle
longest_idx <- which(rle$values & rle$lengths == longest)[1]
# Add up all lengths in rle before the longest run
ind_before_longest <- sum(rle$lengths[seq_len(longest_idx - 1)])
out_start <- ind_before_longest + 1L
out_end <- ind_before_longest + longest
out_start:out_end
}
# Check that it works
span(c(0,  0,  0,  0,  0), is.na)
#> integer(0)
span(c(NA, 0,  0,  0,  0), is.na)
#> [1] 1
span(c(NA, 0, NA, NA, NA), is.na)
#> [1] 3 4 5
z <- c(TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE)
rle(z)
span <- function(x, f) {
idx <- unname(map_lgl(x, ~ f(.x)))
rle <- rle(idx)
# Check if the predicate is never true
if (none(rle$values,is_true)) {
return(integer(0))
}
# Find the length of the longest sequence of true values
longest <- max(rle$lengths[rle$values])
# Find the positition of the (first) longest run in rle
longest_idx <- which(rle$values & rle$lengths == longest)[1]
# Add up all lengths in rle before the longest run
ind_before_longest <- sum(rle$lengths[seq_len(longest_idx - 1)])
out_start <- ind_before_longest + 1L
out_end <- ind_before_longest + longest
out_start:out_end
}
# Check that it works
span(c(0,  0,  0,  0,  0), is.na)
library(rlang)
span <- function(x, f) {
idx <- unname(map_lgl(x, ~ f(.x)))
rle <- rle(idx)
# Check if the predicate is never true
if (none(rle$values,is_true)) {
return(integer(0))
}
# Find the length of the longest sequence of true values
longest <- max(rle$lengths[rle$values])
# Find the positition of the (first) longest run in rle
longest_idx <- which(rle$values & rle$lengths == longest)[1]
# Add up all lengths in rle before the longest run
ind_before_longest <- sum(rle$lengths[seq_len(longest_idx - 1)])
out_start <- ind_before_longest + 1L
out_end <- ind_before_longest + longest
out_start:out_end
}
# Check that it works
span(c(0,  0,  0,  0,  0), is.na)
#> integer(0)
span(c(NA, 0,  0,  0,  0), is.na)
#> [1] 1
span(c(NA, 0, NA, NA, NA), is.na)
#> [1] 3 4 5
span <- function(x, f) {
idx <- unname(map_lgl(x, ~ f(.x)))
rle <- rle(idx)
# Check if the predicate is never true
if (none(rle$values,is_true)) {
#return(integer(0))
stop("the predicate is never true")
}
# Find the length of the longest sequence of true values
longest <- max(rle$lengths[rle$values])
# Find the positition of the (first) longest run in rle
longest_idx <- which(rle$values & rle$lengths == longest)[1]
# Add up all lengths in rle before the longest run
ind_before_longest <- sum(rle$lengths[seq_len(longest_idx - 1)])
out_start <- ind_before_longest + 1L
out_end <- ind_before_longest + longest
out_start:out_end
}
# Check that it works
span(c(0,  0,  0,  0,  0), is.na)
# Check that it works
span(c(0,  0,  0,  0,  0), is.na)
#> integer(0)
span(c(NA, 0,  0,  0,  0), is.na)
#> [1] 1
span(c(NA, 0, NA, NA, NA), is.na)
x <- c(1:4, 0:5, 11)
x
which.max(x)
x <- c(11,1:4, 0:5)
x
which.max(x)
x <- c(11, 1:4, 0:5)
x
which.max(x)
scale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
