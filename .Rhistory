a = c(x = 100)
a
x
a = c(b = 100)
a
b
a = c(b = 100)
a
b
ast(a = c(b = 100))
ast({a = c(b = 100)})
-2^2
-2^2
ast(-2^2)
!1 + !1
ast(!1 + !1)
x1 <- x2 <- x3 <- 0
x1
ast(x1 <- x2 <- x3 <- 0)
(x3 <- 0)
ast(x + y %+% z)
ast(x ^ y %+% z)
parse_expr("x + 1; y + 1")
parse_expr("a +")
parse_expr("f())")
parse(text = "a +")
parse(text = "f())")
parse_expr("a +")
parse_expr("f())")
expr <- expr(g(a + b + c + d + e + f + g + h + i + j + k + l +
m + n + o + p + q + r + s + t + u + v + w + x + y + z))
deparse(expr)
expr_text(expr)
d <- 1
pairwise.t.test(2, d + d + d + d + d + d + d + d +
d + d + d + d + d + d + d + d + d)
expr_type <- function(x) {
if (rlang::is_syntactic_literal(x)) {
"constant"
} else if (is.symbol(x)) {
"symbol"
} else if (is.call(x)) {
"call"
} else if (is.pairlist(x)) {
"pairlist"
} else {
typeof(x)
}
}
switch_expr <- function(x, ...) {
switch(expr_type(x),
...,
stop("Don't know how to handle type ",
typeof(x), call. = FALSE))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
# original
logical_abbr_rec <- function(x) {
switch_expr(x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
call = ,
pairlist = purrr::some(x, logical_abbr_rec)
)
}
logical_abbr(T(1, 2, 3))
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
pairlist = purrr::some(x, logical_abbr_rec),
call = find_T_call(x)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
f <- function(x = TRUE) {
g(x + T)
}
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(!!f)
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(!!f)
logical_abbr(f)
logical_abbr(!!f)
logical_abbr(!!f)
expr_type <- function(x) {
if (rlang::is_syntactic_literal(x)) {
"constant"
} else if (is.symbol(x)) {
"symbol"
} else if (is.call(x)) {
"call"
} else if (is.pairlist(x)) {
"pairlist"
} else {
typeof(x)
}
}
switch_expr <- function(x, ...) {
switch(expr_type(x),
...,
stop("Don't know how to handle type ",
typeof(x), call. = FALSE))
}
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
pairlist = purrr::some(x, logical_abbr_rec),
call = find_T_call(x)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(!!f)
expr_type <- function(x) {
if (rlang::is_syntactic_literal(x)) {
"constant"
} else if (is.symbol(x)) {
"symbol"
} else if (is.call(x)) {
"call"
} else if (is.pairlist(x)) {
"pairlist"
} else {
typeof(x)
}
}
switch_expr <- function(x, ...) {
switch(expr_type(x),
...,
stop("Don't know how to handle type ",
typeof(x), call. = FALSE))
}
# original
logical_abbr_rec <- function(x) {
switch_expr(x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
call = ,
pairlist = purrr::some(x, logical_abbr_rec)
)
}
logical_abbr(T(1, 2, 3))
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
call = find_T_call(x),
pairlist = purrr::some(x, logical_abbr_rec)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
pairlist = purrr::some(x, logical_abbr_rec),
call = find_T_call(x)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
pairlist = purrr::some(x, logical_abbr_rec),
call = find_T_call(x)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
logical_abbr(f)
logical_abbr(!!f)
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
call = find_T_call(x),
pairlist = purrr::some(x, logical_abbr_rec)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
logical_abbr(f)
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
logical_abbr(!!f)
logical_abbr(!f)
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
f <- quote(function(x = TRUE) {
g(x + T)
})
logical_abbr(!f)
logical_abbr(!!f)
library(rlang)
library(lobstr)
ast(names(x) <- y)
if (is_call(x, "<-") && is_call(x[[2]])) {
lhs <- expr_text(x[[2]])
children <- as.list(x)[-1]
}
library(rlang)
library(purrr)
library(rlang)
library(purrr)
paste("Good", "morning", "Hadley")
paste("Good", "afternoon", "Alice")
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
cement(Good, afternoon, Alice)
name <- "Hadley"
time <- "morning"
paste("Good", time, name)
cement(Good, time, name)
cement(Good, !!time, !!name)
paste("Good", time, name)
cement(Good, !!time, !!name)
# works
library(MASS)
# fails
MASS
library(MASS)
MASS
mtcars2 <- subset(mtcars, cyl == 4)
mtcars2
mtcars
cyl
with(mtcars2, sum(vs))
vs
sum(mtcars2$am)
am
rm(mtcars2)
mtcars2
with(mtcars2, sum(vs))
library(MASS)
mtcars2 <- subset(mtcars, cyl == 4)
with(mtcars2, sum(vs))
sum(mtcars2$am)
rm(mtcars2)
library(MASS)
MASS
mtcars2 <- subset(mtcars, cyl == 4)
mtcars2
mtcars
cyl
with(mtcars2, sum(vs))
vs
with(mtcars2, sum(vs))
mtcars2
vs
mtcars2$am
rm
library(dplyr)
library(ggplot2)
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
library(dplyr)
library(ggplot2)
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
library(dplyr)
dplyr
ggplot2
library(ggplot2)
ggplot2
mtcars
cyl
mpg
mean = mean(mpg)
cyl
mean = mean(mpg)
dplyr::summarise
dplyr:::summarise.data.frame
dplyr:::summarise_cols
library(dplyr)
dplyr
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
by_cyl
aes(cyl, mean)
cyl
mean
mean
ggplot2::aes
library(rlang)
library(purrr)
paste("Good", "morning", "Hadley")
paste("Good", "afternoon", "Alice")
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
cement(Good, afternoon, Alice)
name <- "Hadley"
time <- "morning"
paste("Good", time, name)
cement(Good, time, name)
cement(Good, !!time, !!name)
# works
library(MASS)
# fails
MASS
library(MASS)
mtcars2 <- subset(mtcars, cyl == 4)
with(mtcars2, sum(vs))
sum(mtcars2$am)
rm(mtcars2)
library(MASS)
MASS
library(ggplot2)
ggplot2
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
mtcars
cyl
mean = mean(mpg)
mpg
dplyr::summarise
dplyr:::summarise.data.frame
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
by_cyl
aes(cyl, mean)
cyl
mean
expr(x + y)
expr(1 / 2 / 3)
f1 <- function(x) expr(x)
f1(a + b + c)
f2 <- function(x) enexpr(x)
f2(a + b + c)
f <- function(...) enexprs(...)
f(x = 1, y = 10 * z)
exprs(x = x ^ 2, y = y ^ 3, z = z ^ 4)
# shorthand for
# list(x = expr(x ^ 2), y = expr(y ^ 3), z = expr(z ^ 4))
f <- function(...) ensyms(...)
f(x)
f("x")
f(1)
f(1)
f <- function(...) ensyms(...)
f(x)
f("x")
