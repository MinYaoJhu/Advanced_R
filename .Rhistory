#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
f(j())
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
f("a")
library(rlang)
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::abort(f(j()))
rlang::last_trace()
knitr::include_graphics("screenshots/debug-toolbar.png")
f <- function(a) {
cat("f()\n")
g(a)
}
g <- function(b) {
cat("g()\n")
cat("b =", b, "\n")
h(b)
}
h <- function(c) {
cat("i()\n")
i(c)
}
f(10)
f <- function() g()
g <- function() message("Hi!")
f()
rlang::with_abort(f(), "message")
rlang::last_trace()
rlang::abort(f(j()))
rlang::last_trace()
f(j())
rlang::with_abort(f(j()))
rlang::last_trace()
f(j())
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::with_abort(f(j()))
rlang::last_trace()
knitr::include_graphics("screenshots/debug-toolbar.png")
f <- function(a) {
cat("f()\n")
g(a)
}
g <- function(b) {
cat("g()\n")
cat("b =", b, "\n")
h(b)
}
h <- function(c) {
cat("i()\n")
i(c)
}
f(10)
f <- function() g()
g <- function() message("Hi!")
f()
rlang::with_abort(f(), "message")
rlang::last_trace()
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
f(j())
rlang::with_abort(f(j()))
rlang::last_trace()
rlang::abort(f(j()))
f(j())
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
library(rlang)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) {
if (!is.numeric(d)) {
stop("`d` must be numeric", call. = FALSE)
}
d + 10
}
source("debugging.R")
f("a")
knitr::include_graphics("screenshots/debugging/rstudio-error.png")
knitr::include_graphics("screenshots/debugging/rstudio-traceback.png")
traceback()
#> 5: stop("`d` must be numeric", call. = FALSE) at debugging.R#6
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f("a")
source(f("a"))
j <- function() k()
k <- function() stop("Oops!", call. = FALSE)
f(j())
traceback()
#> 7: stop("Oops!") at #1
#> 6: k() at #1
#> 5: j() at debugging.R#1
#> 4: i(c) at debugging.R#3
#> 3: h(b) at debugging.R#2
#> 2: g(a) at debugging.R#1
#> 1: f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
rlang::abort(f(j()))
rlang::last_trace()
f(j()
f(j())
rlang::abort(f(j()))
rlang::last_trace()
f(j())
f(j())
f(j())
options(
rlang_backtrace_on_error = "full",
error = rlang::entrace
)
f(j())
traceback()
rlang::entrace
f(j())
library(profvis)
library(bench)
x <- runif(100)
(lb <- bench::mark(
sqrt(x),
x ^ 0.5
))
plot(lb)
lb[c("expression", "min", "median", "itr/sec", "n_gc")]
n <- 1e6
system.time(for (i in 1:n) sqrt(x)) / n
system.time(for (i in 1:n) x ^ 0.5) / n
n <- 1e6
x <- runif(100)
system.time(for (i in 1:n)
sqrt(x)) / n
system.time(for (i in 1:n)
x ^ 0.5) / n
n <- 1e6
x <- runif(100)
bench_df <- bench::mark(
sqrt(x),
x ^ 0.5,
iterations = n
)
bench_df
t1_bench <- mean(unlist(bench_df[1, "time"]))
t2_bench <- mean(unlist(bench_df[2, "time"]))
t1_systime <- system.time(for (i in 1:n) sqrt(x)) / n
t2_systime <- system.time(for (i in 1:n) x ^ 0.5) / n
# Compare the results
t1_systime["elapsed"]
t1_bench
t2_systime["elapsed"]
t2_bench
?proc.time
x ^ (1 / 2)
exp(log(x) / 2)
x ^ (1 / 2)
exp(log(x) / 2)
x <- runif(100)
benchmark_results <- bench::mark(
sqrt(x),
x^0.5,
x^(1 / 2),
exp(log(x) / 2)
)
sorted_results <- benchmark_results[order(benchmark_results$median), ]
sorted_results
sorted_results <- benchmark_results[benchmark_results$median, ]
sorted_results <- benchmark_results[(benchmark_results$median), ]
sorted_results <- benchmark_results[print(benchmark_results$median), ]
sorted_results
benchmark_results
x <- runif(100)
benchmark_results <- bench::mark(
sqrt(x),
x^0.5,
x^(1 / 2),
exp(log(x) / 2)
)
benchmark_results
x <- runif(100)
benchmark_results <- bench::mark(
sqrt(x),
x^0.5,
x^(1 / 2),
exp(log(x) / 2)
)
benchmark_results
profvis::profvis(f())
num <- function(x) format(round(x), big.mark = ",", scientific = FALSE)
ns <- function(x) paste0(num(round(unclass(x) * 1e9, -1)), " ns")
library(profvis)
library(bench)
f <- function() {
pause(0.1)
g()
h()
}
g <- function() {
pause(0.1)
h()
}
h <- function() {
pause(0.1)
}
knitr::include_graphics("screenshots/performance/flamegraph.png")
knitr::include_graphics("screenshots/performance/info.png")
knitr::include_graphics("screenshots/performance/tree.png")
profvis({x <- integer()
for (i in 1:1e4) {
x <- c(x, i)
}})
knitr::include_graphics("screenshots/performance/memory.png")
profvis({
i <- function() {
pause(0.1)
10
}
j <- function(x) {
x + 10
}
j(i())
})
profvis({
i <- function() {
pause(0.1)
10
}
j <- function(x) {
x + 10
}
force(j(i()))
})
f <- function(n = 1e5) {
x <- rep(1, n)
rm(x)
}
profvis::profvis(f())
library(bench)
library(bench)
mean1 <- function(x) mean(x)
mean2 <- function(x) sum(x) / length(x)
x <- runif(1e5)
x <- runif(1e5)
bench::mark(
mean1(x),
mean2(x)
)[c("expression", "min", "median", "itr/sec", "n_gc")]
penguins <- palmerpenguins::penguins
bench::mark(
"lm" = lm(
body_mass_g ~ bill_length_mm + species, data = penguins
) %>% coef(),
"biglm" = biglm::biglm(
body_mass_g ~ bill_length_mm + species, data = penguins
) %>% coef(),
"speedglm" = speedglm::speedlm(
body_mass_g ~ bill_length_mm + species, data = penguins
) %>% coef(),
"fastLm" = RcppEigen::fastLm(
body_mass_g ~ bill_length_mm + species, data = penguins
) %>% coef()
)
penguins <- palmerpenguins::penguins
bench::mark(
"lm" = lm(
body_mass_g ~ bill_length_mm + species, data = penguins
) |>  coef(),
"biglm" = biglm::biglm(
body_mass_g ~ bill_length_mm + species, data = penguins
) |>  coef(),
"speedglm" = speedglm::speedlm(
body_mass_g ~ bill_length_mm + species, data = penguins
) |>  coef(),
"fastLm" = RcppEigen::fastLm(
body_mass_g ~ bill_length_mm + species, data = penguins
) |>  coef()
)
eps <- rnorm(100000)
x1 <- rnorm(100000, 5, 3)
x2 <- rep(c("a", "b"), 50000)
y <- 7 * x1 + (x2 == "a") + eps
td <- data.frame(y = y, x1 = x1, x2 = x2, eps = eps)
bench::mark(
"lm" = lm(y ~ x1 + x2, data = td) %>% coef(),
"biglm" = biglm::biglm(y ~ x1 + x2, data = td) %>% coef(),
"speedglm" = speedglm::speedlm(y ~ x1 + x2, data = td) %>% coef(),
"fastLm" = RcppEigen::fastLm(y ~ x1 + x2, data = td) %>% coef()
)
eps <- rnorm(100000)
x1 <- rnorm(100000, 5, 3)
x2 <- rep(c("a", "b"), 50000)
y <- 7 * x1 + (x2 == "a") + eps
td <- data.frame(y = y, x1 = x1, x2 = x2, eps = eps)
bench::mark(
"lm" = lm(y ~ x1 + x2, data = td) |>  coef(),
"biglm" = biglm::biglm(y ~ x1 + x2, data = td) |> coef(),
"speedglm" = speedglm::speedlm(y ~ x1 + x2, data = td) |> coef(),
"fastLm" = RcppEigen::fastLm(y ~ x1 + x2, data = td) |> coef()
)
table <- 1:100000
x <- sample(table, 10000, replace = TRUE)
bench::mark(
match = match(x, table),
fastmatch = fastmatch::fmatch(x, table)
)
date_ct <- as.POSIXct("2020-01-01 12:30:25")
date_ct
date_lt <- as.POSIXlt("2020-01-01 12:30:25")
date_lt
attributes(date_lt)
date_lt$sec
date_lt2 <- rep(date_lt, 10000)
date_ct2 <- rep(date_ct, 10000)
bench::mark(
date_lt2 - date_lt2,
date_ct2 - date_ct2,
date_ct2 - date_lt2
)
bench::mark(
as.POSIXct = as.POSIXct("2020-01-01 12:30:25"),
as.POSIXct_format = as.POSIXct("2020-01-01 12:30:25",
format = "%Y-%m-%d %H:%M:%S"
),
strptime_fomat = strptime("2020-01-01 12:30:25",
format = "%Y-%m-%d %H:%M:%S"
)
)[1:3]
library(lubridate)
ymd_hms("2013-07-24 23:55:26")
bench::mark(
as.POSIXct = as.POSIXct("2013-07-24 23:55:26", tz = "UTC"),
ymd_hms = ymd_hms("2013-07-24 23:55:26")
)[1:3]
x <- 1:10
slider::slide_dbl(x, mean, .before = 1, .complete = TRUE)
bench::mark(
caTools = caTools::runmean(x, k = 2, endrule = "NA"),
data.table = data.table::frollmean(x, 2),
RcppRoll = RcppRoll::roll_mean(x, n = 2, fill = NA,
align = "right"),
slider = slider::slide_dbl(x, mean, .before = 1, .complete = TRUE),
TTR = TTR::SMA(x, 2),
zoo_apply = zoo::rollapply(x, 2, mean, fill = NA, align = "right"),
zoo_rollmean = zoo::rollmean(x, 2, fill = NA, align = "right")
)
optim(0, function(x) x^2 - 100 * x + 50,
method = "Brent",
lower = -1e20, upper = 1e20
)
optimize(function(x) x^2 - 100 * x + 50, c(-1e20, 1e20))
x <- runif(1e2)
bench::mark(
mean(x),
mean.default(x)
)[c("expression", "min", "median", "itr/sec", "n_gc")]
x <- runif(1e2)
bench::mark(
mean(x),
mean.default(x),
.Internal(mean(x))
)[c("expression", "min", "median", "itr/sec", "n_gc")]
x <- runif(1e4)
bench::mark(
mean(x),
mean.default(x),
.Internal(mean(x))
)[c("expression", "min", "median", "itr/sec", "n_gc")]
quickdf <- function(l) {
class(l) <- "data.frame"
attr(l, "row.names") <- .set_row_names(length(l[[1]]))
l
}
l <- lapply(1:26, function(i) runif(1e3))
names(l) <- letters
bench::mark(
as.data.frame = as.data.frame(l),
quick_df      = quickdf(l)
)[c("expression", "min", "median", "itr/sec", "n_gc")]
quickdf(list(x = 1, y = 1:2))
rowSums
.rowSums
m <- matrix(rnorm(1e6), nrow = 1000)
bench::mark(
rowSums(m),
.rowSums(m, 1000, 1000)
)
chisq.test
chisq.test2 <- function(x, y) {
m <- rbind(x, y)
margin1 <- rowSums(m)
margin2 <- colSums(m)
n <- sum(m)
me <- tcrossprod(margin1, margin2) / n
x_stat <- sum((m - me)^2 / me)
df <- (length(margin1) - 1) * (length(margin2) - 1)
p.value <- pchisq(x_stat, df = df, lower.tail = FALSE)
list(x_stat = x_stat, df = df, p.value = p.value)
}
a <- 21:25
b <- seq(21, 29, 2)
m <- cbind(a, b)
chisq.test(m) %>% print(digits=5)
a <- 21:25
b <- seq(21, 29, 2)
m <- cbind(a, b)
chisq.test(m) |> print(digits=5)
chisq.test2(a, b)
bench::mark(
chisq.test(m),
chisq.test2(a, b),
check = FALSE
)
table
table()
view(table)
View(table)
table2 <- function(a, b){
a_s <- sort(unique(a))
b_s <- sort(unique(b))
a_l <- length(a_s)
b_l <- length(b_s)
dims <- c(a_l, b_l)
pr <- a_l * b_l
dn <- list(a = a_s, b = b_s)
bin <- fastmatch::fmatch(a, a_s) +
a_l * fastmatch::fmatch(b, b_s) - a_l
y <- tabulate(bin, pr)
y <- array(y, dim = dims, dimnames = dn)
class(y) <- "table"
y
}
a <- sample(100, 10000, TRUE)
b <- sample(100, 10000, TRUE)
bench::mark(
table(a, b),
table2(a, b)
)
table()
stats::table
base::table
?dnorm
rnorm(10, mean = 10:1)
