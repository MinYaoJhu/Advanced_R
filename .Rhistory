function(...) {
append_line(log_path, "called at: ", as.character(Sys.time()))
#f(...)
}
}
log_path <- tempfile()
mean2 <- log_timestamp(mean, log_path)
Sys.sleep(5)
mean2(1:4)
#> [1] 2.5
Sys.sleep(1)
mean2(1:4)
#> [1] 2.5
readLines(log_path)
append_line <- function(path, ...) {
cat(..., "\n", sep = "", file = path, append = TRUE)
}
log_timestamp <- function(f, log_path) {
force(f)
force(log_path)
append_line(log_path, "created at: ", as.character(Sys.time()))
function(...) {
f(...)
append_line(log_path, "called at: ", as.character(Sys.time()))
}
}
log_path <- tempfile()
mean2 <- log_timestamp(mean, log_path)
Sys.sleep(5)
mean2(1:4)
chatty <- function(f) {
force(f)
function(x, ...) {
res <- f(x, ...)
cat("Processing ", x, "\n", sep = "")
res
}
}
f <- function(x) x ^ 2
s <- c(3, 2, 1)
purrr::map_dbl(s, chatty(f))
library(purrr)
library(memoise)
x <- list(
c(0.512, 0.165, 0.717),
c(0.064, 0.781, 0.427),
c(0.890, 0.785, 0.495),
"oops"
)
out <- rep(NA_real_, length(x))
for (i in seq_along(x)) {
out[[i]] <- sum(x[[i]])
}
out
map_dbl(x, sum)
safe_sum <- safely(sum)
safe_sum
str(safe_sum(x[[1]]))
str(safe_sum(x[[4]]))
out <- map(x, safely(sum))
str(out)
out <- transpose(map(x, safely(sum)))
str(out)
ok <- map_lgl(out$error, is.null)
ok
x[!ok]
out$result[ok]
slow_function <- function(x) {
Sys.sleep(1)
x * 10 * runif(1)
}
system.time(print(slow_function(1)))
system.time(print(slow_function(1)))
fast_function <- memoise::memoise(slow_function)
system.time(print(fast_function(1)))
system.time(print(fast_function(1)))
fib <- function(n) {
if (n < 2) return(1)
fib(n - 2) + fib(n - 1)
}
system.time(fib(23))
system.time(fib(24))
fib2 <- memoise::memoise(function(n) {
if (n < 2) return(1)
fib2(n - 2) + fib2(n - 1)
})
system.time(fib2(23))
system.time(fib2(24))
# ?Vectorize
Vectorize
# We use rep.int as rep is primitive
rep.int
vrep <- Vectorize(rep.int)
vrep(1:4, 4:1)
vrep(times = 1:4, x = 4:1)
vrep <- Vectorize(rep.int, "times")
vrep(times = 1:4, x = 42)
f <- function(x = 1:3, y) c(x, y)
vf <- Vectorize(f, SIMPLIFY = FALSE)
f(1:3, 1:3)
vf(1:3, 1:3)
vf(y = 1:3) # Only vectorizes y, not x
# combn() has an argument named FUN
?combn
combnV <- Vectorize(function(x, m, FUNV = NULL) combn(x, m, FUN = FUNV),
vectorize.args = c("x", "m"))
combn(4, 2)
combnV(4, 1:4)
combnV(4, 1:4, sum)
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
path <- paste(tempdir(), names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
delay_by <- function(f, amount) {
force(f)
force(amount)
function(...) {
Sys.sleep(amount)
f(...)
}
}
system.time(runif(100))
system.time(delay_by(runif, 0.1)(100))
dot_every <- function(f, n) {
force(f)
force(n)
i <- 0
function(...) {
i <<- i + 1
if (i %% n == 0) cat(".")
f(...)
}
}
walk(1:100, runif)
walk(1:100, dot_every(runif, 10))
walk2(
urls, path,
download.file %>% dot_every(1) %>% delay_by(0.1),
quiet = TRUE
)
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
path <- paste(tempdir(), names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
walk2(
urls, path,
download.file %>% delay_by(0.1) %>% dot_every(1),
quiet = TRUE
)
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
path <- paste(tempdir(), names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
dir_compare <- function(old, new) {
if (setequal(old, new)) {
return()
}
added <- setdiff(new, old)
removed <- setdiff(old, new)
changes <- c(
if (length(added) > 0) paste0(" * '", added, "' was added"),
if (length(removed) > 0) paste0(" * '", removed ,
"' was removed")
)
message(paste(changes, collapse = "\n"))
}
dir_compare(c("x", "y"), c("x", "y"))
#> NULL
dir_compare(c("x", "y"), c("x", "a"))
#>  * 'a' was added
#>  * 'y' was removed
track_dir <- function(f) {
force(f)
function(...) {
dir_old <- dir()
on.exit(dir_compare(dir_old, dir()), add = TRUE)
f(...)
}
}
file_create <- track_dir(file.create)
file_remove <- track_dir(file.remove)
file_create("delete_me")
#>  * 'delete_me' was added
#> [1] TRUE
file_remove("delete_me")
#>  * 'delete_me' was removed
#> [1] TRUE
append_line <- function(path, ...) {
cat(..., "\n", sep = "", file = path, append = TRUE)
}
log_timestamp <- function(f, log_path) {
force(f)
force(log_path)
append_line(log_path, "created at: ", as.character(Sys.time()))
function(...) {
append_line(log_path, "called at: ", as.character(Sys.time()))
f(...)
}
}
log_path <- tempfile()
mean2 <- log_timestamp(mean, log_path)
Sys.sleep(5)
mean2(1:4)
#> [1] 2.5
Sys.sleep(1)
mean2(1:4)
#> [1] 2.5
readLines(log_path)
delay_by <- function(f, amount) {
force(f)
force(amount)
function(...) {
Sys.sleep(amount)
f(...)
}
}
delay_last <- function(amount, f) {
force(f)
force(amount)
# Store the last time the function was run
last_run_time <- NULL
# Return modified "delay-aware" function
function(...) {
if (!is.null(last_run_time)) {
wait <- (last_run_time - Sys.time()) + amount
if (wait > 0) {
Sys.sleep(wait)
}
}
# Update the time after the function has finished
on.exit(last_run_time <<- Sys.time())
f(...)
}
}
library(purrr)
library(memoise)
dir_compare <- function(old, new) {
if (setequal(old, new)) {
return()
}
added <- setdiff(new, old)
removed <- setdiff(old, new)
changes <- c(
if (length(added) > 0) paste0(" * '", added, "' was added"),
if (length(removed) > 0) paste0(" * '", removed ,
"' was removed")
)
message(paste(changes, collapse = "\n"))
}
dir_compare(c("x", "y"), c("x", "y"))
#> NULL
dir_compare(c("x", "y"), c("x", "a"))
#>  * 'a' was added
#>  * 'y' was removed
possibly
safely
check_bool
capture_error
capture_error
purrr:::capture_error
dir
chatty <- function(f) {
force(f)
function(x, ...) {
res <- f(x, ...)
cat("Processing ", x, "\n", sep = "")
res
}
}
f <- function(x) x ^ 2
s <- c(3, 2, 1)
purrr::map_dbl(s, chatty(f))
library(purrr)
library(memoise)
x <- list(
c(0.512, 0.165, 0.717),
c(0.064, 0.781, 0.427),
c(0.890, 0.785, 0.495),
"oops"
)
out <- rep(NA_real_, length(x))
for (i in seq_along(x)) {
out[[i]] <- sum(x[[i]])
}
out
map_dbl(x, sum)
safe_sum <- safely(sum)
safe_sum
str(safe_sum(x[[1]]))
str(safe_sum(x[[4]]))
out <- map(x, safely(sum))
str(out)
out <- transpose(map(x, safely(sum)))
str(out)
ok <- map_lgl(out$error, is.null)
ok
x[!ok]
out$result[ok]
slow_function <- function(x) {
Sys.sleep(1)
x * 10 * runif(1)
}
system.time(print(slow_function(1)))
system.time(print(slow_function(1)))
fast_function <- memoise::memoise(slow_function)
system.time(print(fast_function(1)))
system.time(print(fast_function(1)))
fib <- function(n) {
if (n < 2) return(1)
fib(n - 2) + fib(n - 1)
}
system.time(fib(23))
system.time(fib(24))
fib2 <- memoise::memoise(function(n) {
if (n < 2) return(1)
fib2(n - 2) + fib2(n - 1)
})
system.time(fib2(23))
system.time(fib2(24))
# ?Vectorize
Vectorize
# We use rep.int as rep is primitive
rep.int
vrep <- Vectorize(rep.int)
vrep(1:4, 4:1)
vrep(times = 1:4, x = 4:1)
vrep <- Vectorize(rep.int, "times")
vrep(times = 1:4, x = 42)
f <- function(x = 1:3, y) c(x, y)
vf <- Vectorize(f, SIMPLIFY = FALSE)
f(1:3, 1:3)
vf(1:3, 1:3)
vf(y = 1:3) # Only vectorizes y, not x
# combn() has an argument named FUN
?combn
combnV <- Vectorize(function(x, m, FUNV = NULL) combn(x, m, FUN = FUNV),
vectorize.args = c("x", "m"))
combn(4, 2)
combnV(4, 1:4)
combnV(4, 1:4, sum)
possibly
safely
purrr:::capture_error
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
path <- paste(tempdir(), names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
delay_by <- function(f, amount) {
force(f)
force(amount)
function(...) {
Sys.sleep(amount)
f(...)
}
}
system.time(runif(100))
system.time(delay_by(runif, 0.1)(100))
dot_every <- function(f, n) {
force(f)
force(n)
i <- 0
function(...) {
i <<- i + 1
if (i %% n == 0) cat(".")
f(...)
}
}
walk(1:100, runif)
walk(1:100, dot_every(runif, 10))
walk2(
urls, path,
download.file %>% dot_every(1) %>% delay_by(0.1),
quiet = TRUE
)
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
path <- paste(tempdir(), names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
walk2(
urls, path,
download.file %>% delay_by(0.1) %>% dot_every(1),
quiet = TRUE
)
urls <- c(
"adv-r" = "https://adv-r.hadley.nz",
"r4ds" = "http://r4ds.had.co.nz/"
# and many many more
)
path <- paste(tempdir(), names(urls), ".html")
walk2(urls, path, download.file, quiet = TRUE)
dir
dir_compare <- function(old, new) {
if (setequal(old, new)) {
return()
}
added <- setdiff(new, old)
removed <- setdiff(old, new)
changes <- c(
if (length(added) > 0) paste0(" * '", added, "' was added"),
if (length(removed) > 0) paste0(" * '", removed ,
"' was removed")
)
message(paste(changes, collapse = "\n"))
}
dir_compare(c("x", "y"), c("x", "y"))
#> NULL
dir_compare(c("x", "y"), c("x", "a"))
#>  * 'a' was added
#>  * 'y' was removed
track_dir <- function(f) {
force(f)
function(...) {
dir_old <- dir()
on.exit(dir_compare(dir_old, dir()), add = TRUE)
f(...)
}
}
file_create <- track_dir(file.create)
file_remove <- track_dir(file.remove)
file_create("delete_me")
#>  * 'delete_me' was added
#> [1] TRUE
file_remove("delete_me")
#>  * 'delete_me' was removed
#> [1] TRUE
append_line <- function(path, ...) {
cat(..., "\n", sep = "", file = path, append = TRUE)
}
log_timestamp <- function(f, log_path) {
force(f)
force(log_path)
append_line(log_path, "created at: ", as.character(Sys.time()))
function(...) {
append_line(log_path, "called at: ", as.character(Sys.time()))
f(...)
}
}
log_path <- tempfile()
mean2 <- log_timestamp(mean, log_path)
Sys.sleep(5)
mean2(1:4)
Sys.sleep(1)
mean2(1:4)
readLines(log_path)
delay_by <- function(f, amount) {
force(f)
force(amount)
function(...) {
Sys.sleep(amount)
f(...)
}
}
delay_last <- function(amount, f) {
force(f)
force(amount)
# Store the last time the function was run
last_run_time <- NULL
# Return modified "delay-aware" function
function(...) {
if (!is.null(last_run_time)) {
wait <- (last_run_time - Sys.time()) + amount
if (wait > 0) {
Sys.sleep(wait)
}
}
# Update the time after the function has finished
on.exit(last_run_time <<- Sys.time())
f(...)
}
}
install.packages(c("classInt", "haven", "RcppParallel"))
source("common.R")
diamonds <- ggplot2::diamonds
summary(diamonds$carat)
summary(diamonds$cut)
diamonds
library(sloop)
library(sloop)
otype(1:10)
otype(mtcars)
mle_obj <- stats4::mle(function(x = 1) (x - 2) ^ 2)
otype(mle_obj)
knitr::include_graphics("diagrams/oo-venn.png")
# A base object:
is.object(1:10)
sloop::otype(1:10)
# An OO object
is.object(mtcars)
sloop::otype(mtcars)
library(sloop)
attr(1:10, "class")
attr(mtcars, "class")
x <- matrix(1:4, nrow = 2)
class(x)
sloop::s3_class(x)
typeof(1:10)
typeof(mtcars)
