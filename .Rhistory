str(df[, "a"])
str(df[, "a", drop = FALSE])
z <- factor(c("a", "b"))
z[1]
z[1, drop = TRUE]
x <- 1:5
x[NA]
x <- list(1:3, "a", 4:6)
knitr::include_graphics("diagrams/subsetting/train.png")
knitr::include_graphics("diagrams/subsetting/train-single.png")
knitr::include_graphics("diagrams/subsetting/train-multiple.png")
options(warnPartialMatchDollar = FALSE)
var <- "cyl"
# Doesn't work - mtcars$var translated to mtcars[["var"]]
mtcars$var
# Instead use [[
mtcars[[var]]
x <- list(abc = 1)
x$a
x[["a"]]
options(warnPartialMatchDollar = TRUE)
x$a
x <- list(
a = list(1, 2, 3),
b = list(3, 4, 5)
)
purrr::pluck(x, "a", 1)
purrr::pluck(x, "c", 1)
purrr::pluck(x, "c", 1, .default = NA)
x <- 1:5
x[c(1, 2)] <- c(101, 102)
x
x <- list(a = 1, b = 2)
x[["b"]] <- NULL
str(x)
y <- list(a = 1, b = 2)
y["b"] <- list(NULL)
str(y)
mtcars[] <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
mtcars <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
rm(mtcars)
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
unname(lookup[x])
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
id <- match(grades, info$grade)
id
info[id, ]
df <- data.frame(x = c(1, 2, 3, 1, 2), y = 5:1, z = letters[1:5])
# Randomly reorder
df[sample(nrow(df)), ]
# Select 3 random rows
df[sample(nrow(df), 3), ]
# Select 6 bootstrap replicates
df[sample(nrow(df), 6, replace = TRUE), ]
x <- c("b", "c", "a")
order(x)
x[order(x)]
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
rep(1:nrow(df), df$n)
df[rep(1:nrow(df), df$n), ]
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$z <- NULL
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[c("x", "y")]
df[setdiff(names(df), "z")]
mtcars[mtcars$gear == 5, ]
mtcars[mtcars$gear == 5 & mtcars$cyl == 4, ]
x <- sample(10) < 4
which(x)
unwhich <- function(x, n) {
out <- rep_len(FALSE, n)
out[x] <- TRUE
out
}
unwhich(which(x), 10)
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))
# X & Y <-> intersect(x, y)
x1 & y1
intersect(x2, y2)
# X | Y <-> union(x, y)
x1 | y1
union(x2, y2)
# X & !Y <-> setdiff(x, y)
x1 & !y1
setdiff(x2, y2)
# xor(X, Y) <-> setdiff(union(x, y), intersect(x, y))
xor(x1, y1)
setdiff(union(x2, y2), intersect(x2, y2))
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3, 1)]
x[order(x)]
# Duplicate indices will duplicate values
x[c(1, 1)]
# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]
order(x)
x[order(x)]
x[-c(3, 1)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x[x > 3]
x[c(TRUE, FALSE)]
# Equivalent to
x[c(TRUE, FALSE, TRUE, FALSE)]
x[c(TRUE, TRUE, NA, FALSE)]
x[]
x[0]
(y <- setNames(x, letters[1:4]))
y[c("d", "c", "a")]
# Like integer indices, you can repeat indices
y[c("a", "a", "a")]
# When subsetting with [, names are always matched exactly
z <- c(abc = 1, def = 2)
z[c("a", "d")]
y
y[factor("b")]
as.integer(factor("b"))
as.integer(factor("b","a"))
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a[1:2, ]
a[c(TRUE, FALSE, TRUE), c("B", "A")]
a[0, -2]
a[1, ]
a[1, 1]
vals <- outer(1:5, 1:5, FUN = "paste", sep = ",")
vals
vals[c(4, 15)]
a <- matrix(1:4, nrow = 2)
str(a[1, ])
str(a[1, , drop = FALSE])
df <- data.frame(a = 1:2, b = 1:2)
str(df[, "a"])
str(df[, "a", drop = FALSE])
z <- factor(c("a", "b"))
z[1]
z[1, drop = TRUE]
mtcars[mtcars$cyl = 4, ]
str(mtcars)
#mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[-1:4, ]
#mtcars[-1:4, ]
mtcars[-(1:4), ]
#mtcars[-1:4, ]
mtcars[-c(1:4), ]
mtcars[mtcars$cyl <= 5]
#mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5, ]
mtcars[mtcars$cyl == 4 | 6, ]
#mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]
mtcars[mtcars$cyl %in% c(4, 6), ]
str(mtcars)
df[is.na(df)] <- 0
df
str(df)
library(rlang)
str(catch_cnd(stop("An error")))
str(catch_cnd(abort("An error")))
show_condition <- function(code) {
tryCatch(
error = function(cnd) "error",
warning = function(cnd) "warning",
message = function(cnd) "message",
{
print(code)
NULL
}
)
}
show_condition(10)
show_condition <- function(code) {
tryCatch(
error = function(cnd) "error",
warning = function(cnd) "warning",
message = function(cnd) "message",
{
code
#NULL
}
)
}
show_condition(10)
withCallingHandlers(
message = function(cnd) message("b"),
withCallingHandlers(
message = function(cnd) cat("a"),
message("c")
)
)
#?unlist()
?as.vector()
# source("common.R")
# rownames(mtcars) <- NULL
mtcars[mtcars$cyl = 4, ]
#mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[-1:4, ]
#mtcars[-1:4, ]
mtcars[-c(1:4), ]
mtcars[mtcars$cyl <= 5]
#mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 : 6, ]
mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 : 6, ]
mtcars[mtcars$cyl == (4 : 6), ]
#mtcars[mtcars$cyl == (4 : 6), ]
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]
mtcars[mtcars$cyl == 4 || 6, ]
x <- outer(1:5, 1:5, FUN = "*")
x
upper.tri(x)
x <- outer(1:5, 1:5, FUN = "*")
x
upper.tri(x)
upper.tri(x)
x[upper.tri(x)]
df
str(df)
df[is.na(df)] <- 0
df
str(df)
# source("common.R")
# rownames(mtcars) <- NULL
#1
mtcars$cyl[[3]]
#2
str(mtcars)
mod <- lm(mpg ~ wt, data = mtcars)
mod
str(mod)
summary(mod)
str(mod)
mod$df.residual
#1
mod$df.residual
#2
mod[["df.residual"]]
#3
summary(mod)$df.residual
summary(mod)
#3
str(summary(mod))
summary(mod)
str(mod)
summary(mod)
#3
str(summary(mod))$df
summary(mod)$df
mtcars
mtcars[sample(ncol(mtcars))]
mtcars
mtcars[sample(ncol(mtcars))]
mtcars[sample(nrow(mtcars)), sample(ncol(mtcars))]
# select a random sample of m rows from a data frame
m <- 10
mtcars[sample(nrow(mtcars), m), ]
# select a random sample of m rows from a data frame
m <- 5
mtcars[sample(nrow(mtcars), m), ]
start <- sample(nrow(mtcars) - m + 1, 1)
end <- start + m - 1
mtcars[start:end, , drop = FALSE]
mtcars[order(names(mtcars))]
mtcars[sort(names(mtcars))]
mtcars[arrange(names(mtcars))]
library(dplyr)
mtcars[arrange(names(mtcars))]
mtcars[dplyr::arrange(names(mtcars))]
mtcars[order(names(mtcars))]
mtcars[sort(names(mtcars))]
library(dplyr)
mtcars[dplyr::arrange(names(mtcars))]
names(mtcars)
dplyr::arrange(names(mtcars))
arrange(mtcars, name)
dplyr::arrange(mtcars, name)
dplyr::arrange(mtcars, names)
dplyr::arrange(mtcars,names(mtcars))
mtcars
library(tibble)
mtcars_2 <- tibble::rownames_to_column(mtcars, "rownames")
mtcars_2
dplyr::arrange(mtcars_2,rownames)
mtcars[order(names(mtcars))]
mtcars[sort(names(mtcars))]
library(tibble)
mtcars_2 <- tibble::rownames_to_column(mtcars, "rownames")
mtcars_2
library(dplyr)
dplyr::arrange(mtcars_2,rownames)
mtcars[dplyr::arrange(names(mtcars)),]
library(tibble)
mtcars_2 <- tibble::rownames_to_column(mtcars, "rownames")
mtcars_2
library(dplyr)
dplyr::arrange(mtcars_2,rownames)
x <- TRUE
y <- if (x) 3
y
x <- FALSE
y <- if (x) 3
y
x <- NA
y <- if (x) 3
switch("x", x = , y = 2, z = 3)
# source("common.R")
# rownames(mtcars) <- NULL
logical()[[1]]
logical()[["x"]]
logical()[["x"]]
logical()[[1]]
logical()[["x"]]
logical()[[NA_real_]]
logical()[[NULL]]
list()[[1]]
list()[["x"]]
list()[[NA_real_]]
list()[[NULL]]
NULL[[1]]
NULL[["x"]]
NULL[[NA_real_]]
NULL[[NULL]]
x <- list(
a = list(1, 2, 3),
b = list(3, 4, 5)
)
purrr::pluck(x, "a", 1)
purrr::pluck(x, "c", 1)
purrr::pluck(x, "c", 1, .default = NA)
x <- 1:5
x[c(1, 2)] <- c(101, 102)
x
#lapply: Apply a Function over a List or Vector
mtcars[] <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
str(mtcars)
mtcars <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
str(mtcars)
rm(mtcars)
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
id <- match(grades, info$grade)
id
info[id, ]
id <- match(grades, info$grade)
id
info[id, ]
df <- data.frame(x = c(1, 2, 3, 1, 2), y = 5:1, z = letters[1:5])
df
# Randomly reorder
df[sample(nrow(df)), ]
# Select 3 random rows
df[sample(nrow(df), 3), ]
# Select 6 bootstrap replicates
df[sample(nrow(df), 6, replace = TRUE), ]
x <- c("b", "c", "a")
order(x)
x[order(x)]
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
1:nrow(df)
df$n
rep(1:nrow(df), df$n)
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$z <- NULL
df
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[c("x", "y")]
names(df)
setdiff(names(df), "z")
# Performs set union, intersection, (asymmetric!) difference, equality and membership on two vectors.
df[setdiff(names(df), "z")]
x <- sample(10) < 4
which(x)
x <- sample(10) < 4
x
which(x)
sample(10)
which(x)
unwhich(which(x), 10)
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))
# X & Y <-> intersect(x, y)
x1 & y1
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))
# X & Y <-> intersect(x, y)
x1 & y1
intersect(x2, y2)
# X | Y <-> union(x, y)
x1 | y1
# X & !Y <-> setdiff(x, y)
x1 & !y1
setdiff(x2, y2)
# xor(X, Y) <-> setdiff(union(x, y), intersect(x, y))
xor(x1, y1)
union(x2, y2)
intersect(x2, y2)
setdiff(union(x2, y2), intersect(x2, y2))
which(y1)
which(x1)
-which(y1)
!y1
x1[!y1]
x <- 1:10
!y1
x[!y1]
!y1
x[!y1]
x[-which(y1)]
!y1
rep(10,10)
x <- rep(10,10)
!y1
x[!y1]
rep(FALSE,10)
y <- rep(FALSE,10)
x[!y]
x <- 1:10
!y1
x[!y1]
-which(y1)
x[-which(y1)]
y <- rep(FALSE,10)
x[!y]
x[-which(y)]
which(y)
which(y)
which(y1)
-which(y)
x[-which(y)]
library(tibble)
library(dplyr)
library(tidyverse)
mtcars
mtcars[order(names(mtcars))]
mtcars[sort(names(mtcars))]
colnames(data)
colnames(mtcars)
order(colnames(mtcars), decreasing = TRUE)
names(mtcars)
names(mtcars)
order(names(mtcars), decreasing = TRUE)
order(names(mtcars))
select(order(names(mtcars)))
order(names(mtcars))
order(names(mtcars))
mtcars %>% select(order(names(mtcars)))
ncol(mtcars)
sample(ncol(mtcars))
mtcars %>% select(sample(ncol(mtcars)))
sample(ncol(mtcars))
sample(nrow(mtcars))
sample(nrow(mtcars))
mtcars %>%
select(sample(ncol(mtcars))) %>%
order(sample(nrow(mtcars)))
mtcars %>%
select(sample(ncol(mtcars))) %>%
arrange(sample(nrow(mtcars)))
mtcars %>% sample_n(m)
start <- sample(nrow(mtcars) - m + 1, 1)
end <- start + m - 1
mtcars[start:end, , drop = FALSE]
mtcars %>% slice(start:end)
x <- TRUE
y <- if (x) 3
y
x <- FALSE
y <- if (x) 3
y
x <- NA
y <- if (x) 3
