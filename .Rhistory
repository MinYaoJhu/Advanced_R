}
))
hadley2 <- Person$new("Hadley")
hadley2
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
# invisible(self)
}
))
hadley2 <- Person$new("Hadley")
hadley2
hadley2$print
hadley2$print()$print()
hadley2$print()
hadley2$print()$print()
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
invisible(self)
}
))
hadley2 <- Person$new("Hadley")
hadley2
hadley2$print()
hadley2$print()$print()
hadley2
hadley2$print()
hadley2$print()$print()
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
self
}
))
hadley2 <- Person$new("Hadley")
hadley2
hadley2$print()
hadley2$print()$print()
hadley2
hadley2$print()
hadley2$print()$print()
hadley2
hadley2$print()
hadley2$print()$print()
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
invisible(self)
}
))
hadley2 <- Person$new("Hadley")
hadley2
hadley2$print()
hadley2$print()$print()
hadley2
hadley2$print()
hadley2
hadley2$print()$print()
# install.packages("R6")
library(R6)
Accumulator <- R6Class("Accumulator", list(
sum = 0,
add = function(x = 1) {
self$sum <- self$sum + x
invisible(self)
})
)
Accumulator
x <- Accumulator$new()
x$add(4)
x$sum
Accumulator <- R6Class("Accumulator", list(
sum = 0,
add = function(x = 1) {
self$sum <- self$sum + x
invisible(self)
})
)
x$add(10)$add(10)$sum
x$
add(10)$
add(10)$
sum
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
stopifnot(is.character(name), length(name) == 1)
stopifnot(is.numeric(age), length(age) == 1)
self$name <- name
self$age <- age
}
))
hadley <- Person$new("Hadley", age = "thirty-eight")
hadley <- Person$new("Hadley", age = 38)
Person <- R6Class("Person", list(
name = NULL,
age = NA,
initialize = function(name, age = NA) {
self$name <- name
self$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", self$name, "\n", sep = "")
cat("  Age:  ", self$age, "\n", sep = "")
invisible(self)
}
))
hadley2 <- Person$new("Hadley")
hadley2
hadley2$print()
hadley2$print()$print()
hadley
hadley$print
AccumulatorChatty <- R6Class("AccumulatorChatty",
inherit = Accumulator,
public = list(
add = function(x = 1) {
cat("Adding ", x, "\n", sep = "")
super$add(x = x)
}
)
)
x2 <- AccumulatorChatty$new()
x2$add(10)$add(1)$sum
class(hadley2)
names(hadley2)
BankAccount <- R6Class(
classname = "BankAccount",
public = list(
balance = 0,
deposit = function(dep = 0) {
self$balance <- self$balance + dep
invisible(self)
},
withdraw = function(draw) {
self$balance <- self$balance - draw
invisible(self)
}
)
)
my_account <- BankAccount$new()
my_account$balance
my_account$
deposit(5)$
withdraw(15)$
balance
BankAccountStrict <- R6Class(
classname = "BankAccountStrict",
inherit = BankAccount,
public = list(
withdraw = function(draw = 0) {
if (self$balance - draw < 0) {
stop("Overdraft! ",
"Your `current balance` is less than your withdraw.",
call. = FALSE
)
}
super$withdraw(draw = draw)
}
)
)
my_strict_account <- BankAccountStrict$new()
my_strict_account$balance
my_strict_account$balance
BankAccountCharging <- R6Class(
classname = "BankAccountCharging",
inherit = BankAccount,
public = list(
withdraw = function(draw = 0) {
if (self$balance - draw < 0) {
draw <- draw + 1
}
super$withdraw(draw = draw)
}
)
)
my_charging_account <- BankAccountCharging$new()
my_charging_account$balance
my_charging_account$
deposit(5)$
withdraw(15)$
withdraw(0)
my_charging_account$balance
suit <- c("♠", "♥", "♦", "♣")
value <- c("A", 2:10, "J", "Q", "K")
cards <- paste0(rep(value, 4), suit)
ShuffledDeck <- R6Class(
classname = "ShuffledDeck",
public = list(
deck = NULL,
initialize = function(deck = cards) {
self$deck <- sample(deck)
},
reshuffle = function() {
self$deck <- sample(cards)
invisible(self)
},
n = function() {
length(self$deck)
},
draw = function(n = 1) {
if (n > self$n()) {
stop("Only ", self$n(), " cards remaining.", call. = FALSE)
}
output <- self$deck[seq_len(n)]
self$deck <- self$deck[-seq_len(n)]
output
}
)
)
my_deck <- ShuffledDeck$new()
my_deck$draw(52)
my_deck$reshuffle()$draw(5)
my_deck$reshuffle()$draw(5)
Timezone <- R6Class(
classname = "Timezone",
public = list(
get = function() {
Sys.timezone()
},
set = function(value) {
stopifnot(value %in% OlsonNames())
old <- self$get()
Sys.setenv(TZ = value)
invisible(old)
}
)
)
tz <- Timezone$new()
old <- tz$set("Antarctica/South_Pole")
tz$get()
tz$set(old)
tz$get()
WorkingDirectory <- R6Class(
classname = "WorkingDirectory",
public = list(
get = function() {
getwd()
},
set = function(value) {
setwd(value)
}
)
)
Person <- R6Class("Person",
public = list(
initialize = function(name, age = NA) {
private$name <- name
private$age <- age
},
print = function(...) {
cat("Person: \n")
cat("  Name: ", private$name, "\n", sep = "")
cat("  Age:  ", private$age, "\n", sep = "")
}
),
private = list(
age = NA,
name = NULL
)
)
hadley3 <- Person$new("Hadley")
hadley3
hadley3$name
Rando <- R6::R6Class("Rando", active = list(
random = function(value) {
if (missing(value)) {
runif(1)
} else {
stop("Can't set `$random`", call. = FALSE)
}
}
))
x <- Rando$new()
x$random
x$random
x$random
Person <- R6Class("Person",
private = list(
.age = NA,
.name = NULL
),
active = list(
age = function(value) {
if (missing(value)) {
private$.age
} else {
stop("`$age` is read only", call. = FALSE)
}
},
name = function(value) {
if (missing(value)) {
private$.name
} else {
stopifnot(is.character(value), length(value) == 1)
private$.name <- value
self
}
}
),
public = list(
initialize = function(name, age = NA) {
private$.name <- name
private$.age <- age
}
)
)
hadley4 <- Person$new("Hadley", age = 38)
hadley4$name
hadley4$name <- 10
hadley4$age <- 20
BankAccountStrictError <- R6Class(
classname = "BankAccountStrictError",
public = list(
deposit = function(dep = 0) {
private$balance <- private$balance + dep
invisible(self)
},
withdraw = function(draw = 0) {
if (private$balance - draw < 0) {
stop(
"Your `withdraw` must be smaller ",
"than your `balance`.",
call. = FALSE
)
}
private$balance <- private$balance - draw
invisible(self)
}
),
private = list(
balance = 0
)
)
my_account_strict_error <- BankAccountStrictError$new()
my_account_strict_error$deposit(5)
my_account_strict_error$withdraw(10)
Password <- R6Class(
classname = "Password",
public = list(
print = function(...) {
cat("<Password>: ********\n")
invisible(self)
},
set = function(value) {
private$password <- value
},
check = function(password) {
identical(password, private$password)
}
),
private = list(
password = NULL
)
)
my_pw <- Password$new()
my_pw$set("This_is_my_password!")
my_pw$password
my_pw
my_pw$check("Thisismypassword")
my_pw$check("This_is_my_password!")
Rando <- R6::R6Class(
classname = "Rando",
private = list(
last_random = NULL
),
active = list(
random = function(value) {
if (missing(value)) {
private$last_random <- runif(1)
private$last_random
} else {
stop("Can't set `$random`.", call. = FALSE)
}
},
previous = function(value) {
if (missing(value)) {
private$last_random
}
}
)
)
x <- Rando$new()
x$random
x$random
x$previous
ParentClass <- R6Class(
classname = "ParentClass",
private = list(
field = "apple",
method = function() {
"juice"
}
)
)
SubClass <- R6Class(
classname = "SubClass",
inherit = ParentClass,
public = list(
test = function() {
cat("Field:  ", super$field, "\n", sep = "")
cat("Method: ", super$method(), "\n", sep = "")
}
)
)
SubClass$new()$test()
y1 <- Accumulator$new()
y2 <- y1
y1$add(10)
c(y1 = y1$sum, y2 = y2$sum)
y1 <- Accumulator$new()
y2 <- y1$clone()
y1$add(10)
c(y1 = y1$sum, y2 = y2$sum)
x <- factor(c("a", "b", "c"))
levels(x) <- c("c", "b", "a")
TemporaryFile <- R6Class("TemporaryFile", list(
path = NULL,
initialize = function() {
self$path <- tempfile()
},
finalize = function() {
message("Cleaning up ", self$path)
unlink(self$path)
}
))
tf <- TemporaryFile$new()
rm(tf)
#> Cleaning up /tmp/Rtmpk73JdI/file155f31d8424bd
TemporaryDatabase <- R6Class("TemporaryDatabase", list(
con = NULL,
file = TemporaryFile$new(),
initialize = function() {
self$con <- DBI::dbConnect(RSQLite::SQLite(), path = file$path)
},
finalize = function() {
DBI::dbDisconnect(self$con)
}
))
db_a <- TemporaryDatabase$new()
db_b <- TemporaryDatabase$new()
db_a$file$path == db_b$file$path
TemporaryDatabase <- R6Class("TemporaryDatabase", list(
con = NULL,
file = NULL,
initialize = function() {
self$file <- TemporaryFile$new()
self$con <- DBI::dbConnect(RSQLite::SQLite(), path = file$path)
},
finalize = function() {
DBI::dbDisconnect(self$con)
}
))
db_a <- TemporaryDatabase$new()
db_b <- TemporaryDatabase$new()
db_a$file$path == db_b$file$path
WriteFile <- R6::R6Class(
classname = "WriteFile",
public = list(
con = NULL,
initialize = function(filename) {
self$con <- file(filename, open = "a")
},
append_line = function(x) {
cat(x, "\n", sep = "", file = self$con)
},
finalize = function() {
close(self$con)
}
)
)
tmp_file <- tempfile()
test_writer <- WriteFile$new(tmp_file)
readLines(tmp_file)
test_writer$append_line("First")
test_writer$append_line("Second")
readLines(tmp_file)
