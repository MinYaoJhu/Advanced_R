str(pri)
length(pri)
square <- function(x) x^2
deviation <- function(x) x - mean(x)
x <- runif(100)
sqrt(mean(square(deviation(x))))
out <- deviation(x)
out <- square(out)
out <- mean(out)
out <- sqrt(out)
out
library(magrittr)
x %>%
deviation() %>%
square() %>%
mean() %>%
sqrt()
x <- 10
g01 <- function() {
x <- 20
x
}
g01()
x <- 10
y <- 20
g02 <- function() {
x <- 1
y <- 2
c(x, y)
}
g02()
x <- 2
g03 <- function() {
y <- 1
c(x, y)
}
g03()
# And this doesn't change the previous value of y
y
x <- 1
g04 <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
g04()
g07 <- function(x) x + 1
g08 <- function() {
g07 <- function(x) x + 100
g07(10)
}
g08()
g09 <- function(x) x + 100
g10 <- function() {
g09 <- 10
g09(g09)
}
g10()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
g12 <- function() x + 1
x <- 15
g12()
x <- 20
g12()
codetools::findGlobals(g12)
environment(g12) <- emptyenv()
g12()
f <- function(x) {
f <- function(x) {
f <- function() {
x ^ 2
}
f() + 1
}
f(x) * 2
}
f(10)
h01 <- function(x) {
10
}
h01(stop("This is an error!"))
y <- 10
h02 <- function(x) {
y <- 100
x + 1
}
h02(y)
h02(y <- 1000)
y
double <- function(x) {
message("Calculating...")
x * 2
}
h03 <- function(x) {
c(x, x)
}
h03(double(20))
h04 <- function(x = 1, y = x * 2, z = a + b) {
a <- 10
b <- 100
c(x, y, z)
}
h04()
h06 <- function(x = 10) {
list(missing(x), x)
}
str(h06())
str(h06(10))
args(sample)
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
if (is.null(size)) {
size <- length(x)
}
x[sample.int(length(x), size, replace = replace, prob = prob)]
}
`%||%` <- function(lhs, rhs) {
if (!is.null(lhs)) {
lhs
} else {
rhs
}
}
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
size <- size %||% length(x)
x[sample.int(length(x), size, replace = replace, prob = prob)]
}
x_ok <- function(x) {
!is.null(x) && length(x) == 1 && x > 0
}
x_ok(NULL)
x_ok(1)
x_ok(1:3)
x_ok <- function(x) {
!is.null(x) & length(x) == 1 & x > 0
}
x_ok(NULL)
x_ok(1)
x_ok(1:3)
f2 <- function(x = z) {
z <- 100
x
}
f2()
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
c(x, y)
}
f1()
y
range("Sturges")
show_time <- function(x = stop("Error!")) {
stop <- function(...) Sys.time()
print(x)
}
show_time()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
library(tidyverse)
x <- c(1:10, NA)
mean(x, na.rm = TRUE)
f02 <- function(x, y) {
# A comment
x + y
}
formals(f02)
body(f02)
environment(f02)
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
onePlusTen <- f1(1)
tenPlusTen <- f1(10)
onePlusTen
tenPlusTen
knitr::include_graphics("diagrams/functions/components.png")
attr(f02, "srcref")
sum
`[`
typeof(sum)
typeof(`[`)
formals(sum)
body(sum)
environment(sum)
f01 <- function(x) {
sin(1 / x ^ 2)
}
knitr::include_graphics("diagrams/functions/first-class.png")
funs <- list(
half = function(x) x / 2,
double = function(x) x * 2
)
funs$double(10)
args <- list(1:10, na.rm = TRUE)
do.call(mean, args)
?match.fun()
match.fun(mean)
function(x) 3()
(function(x) 3)()
function1 <- function(x) 3()
#function1()
#Error in function1() : attempt to apply non-function
sapply(1:2, function(x) x + 1L)
?is.function()
?is.primitive()
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
?mget
str(funs)
library(purrr)
?map_int
n_args <- funs %>%
map(formals) %>%
map_int(length)
str(n_args)
n_args %>%
which.max()
sum(n_args == 0)
n_args2 <- funs %>%
discard(is.primitive) %>%
map(formals) %>%
map_int(length)
sum(n_args2 == 0)
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
pri <- Filter(is.primitive, objs)
str(pri)
length(pri)
square <- function(x) x^2
deviation <- function(x) x - mean(x)
x <- runif(100)
sqrt(mean(square(deviation(x))))
out <- deviation(x)
out <- square(out)
out <- mean(out)
out <- sqrt(out)
out
library(magrittr)
x %>%
deviation() %>%
square() %>%
mean() %>%
sqrt()
x <- 10
g01 <- function() {
x <- 20
x
}
g01()
x <- 10
y <- 20
g02 <- function() {
x <- 1
y <- 2
c(x, y)
}
g02()
x <- 2
g03 <- function() {
y <- 1
c(x, y)
}
g03()
# And this doesn't change the previous value of y
y
x <- 1
g04 <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
g04()
g07 <- function(x) x + 1
g08 <- function() {
g07 <- function(x) x + 100
g07(10)
}
g08()
g09 <- function(x) x + 100
g10 <- function() {
g09 <- 10
g09(g09)
}
g10()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
g11 <- function() {
if (!exists("a")) {
a <- 1
} else {
a <- a + 1
}
a
}
g11()
g11()
g12 <- function() x + 1
x <- 15
g12()
x <- 20
g12()
codetools::findGlobals(g12)
environment(g12) <- emptyenv()
g12()
c <- 10
c(c = c)
h05 <- function(x = ls()) {
a <- 1
x
}
# ls() evaluated inside h05:
h05()
# ls() evaluated in global environment:
h05(ls())
h06 <- function(x = 10) {
list(missing(x), x)
}
str(h06())
str(h06(10))
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
if (is.null(size)) {
size <- length(x)
}
x[sample.int(length(x), size, replace = replace, prob = prob)]
}
`%||%` <- function(lhs, rhs) {
if (!is.null(lhs)) {
lhs
} else {
rhs
}
}
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
size <- size %||% length(x)
x[sample.int(length(x), size, replace = replace, prob = prob)]
}
sample <- function(x, size = NULL, replace = FALSE, prob = NULL) {
if (is.null(size)) {
size <- length(x)
}
x[sample.int(length(x), size, replace = replace, prob = prob)]
}
h05 <- function(x = ls()) {
a <- 1
x
}
# ls() evaluated inside h05:
h05()
#> [1] "a" "x"
# ls() evaluated in global environment:
h05(1)
#> [1] "h05"
# ls() evaluated in global environment:
h05(x = ls())
env <- ls()
h05(env)
?&&
?`&&`
x_ok <- function(x) {
!is.null(x) & length(x) == 1 & x > 0
}
x_ok(NULL)
x_ok(1)
x_ok(1:3)
length(NULL) == 1
length(NULL) == 1
NULL > 0
f2 <- function(x = z) {
z <- 100
x
}
f2()
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
c(x, y)
}
f1()
y
?library()
y <- 10
f1 <- function(x = f(), y = 0) {
f(){y <- 1; 2}
y <- 10
f(){y <- 1; 2}
y <- 10
fun1 = function(x=2){y <- 1;
c(x,y)
}
f1 <- function(x = f(), y = 0) {
c(x, y)
}
f1()
fun1 = function(x=2){y <- 1;
c(x,y)
}
f1 <- function(x = fun1, y = 0) {
c(x, y)
}
f1()
f1(x = 2)
fi(y = 3)
f1(y = 3)
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
c(x, y)
}
f1()
y
f1(x = 2)
f1(y = 3)
?range
range(1:10)
?hist()
formals(library)
sum(formals(library))
formals(library)
length(formals(library))
print(function(...) Sys.time())
print(x=function(...) Sys.time())
print(Sys.time())
?map
FALSE & NA
?library()
(print.libraryIQR())
print.libraryIQR()
i01 <- function(y, z) {
list(y = y, z = z)
}
i02 <- function(x, ...) {
i01(...)
}
str(i02(x = 1, y = 2, z = 3))
i03 <- function(...) {
list(first = ..1, third = ..3)
}
str(i03(1, 2, 3))
i04 <- function(...) {
list(...)
}
str(i04(a = 1, b = 2))
x <- list(c(1, 3, NA), c(4, NA, 6))
str(lapply(x, mean, na.rm = TRUE))
print(factor(letters), max.levels = 4)
print(y ~ x, showEnv = TRUE)
sum(1, 2, NA, na_rm = TRUE)
sum(1, 2, 3)
mean(1, 2, 3)
sum(1, 2, 3, na.omit = TRUE)
mean(1, 2, 3, na.omit = TRUE)
