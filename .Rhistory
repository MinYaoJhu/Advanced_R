setNames
getAnywhere(setNames)
x <- setNames(1:3, c("a", "b", "c"))
str(x)
getAnywhere(unname)
unname(x) %>% str()
vector <- c(1:10)
vector
dim(vector)
NROW(vector)
NCOL(vector)
nrow(vector)
ncol(vector)
#?NROW()
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
str(x1)
str(x2)
str(x3)
str(1:5)
attributes(x1)
attributes(x2)
attributes(x3)
attributes(1:5)
structure(1:5, comment = "my attribute")
#?comment
?attributes() # These functions access an object's attributes.
#?attr() # Get or set specific attributes of an object.
#?structure() # structure returns the given object with further attributes set.
attributes(structure(1:5, comment = "my attribute"))
test <- structure(1:5, comment = "my attribute")
attributes(test)
attr(test, which = "comment")
knitr::include_graphics("diagrams/vectors/summary-tree-s3-1.png")
x <- factor(c("a", "b", "b", "a"))
x
typeof(x)
attributes(x)
knitr::include_graphics("diagrams/vectors/factor.png")
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(sex_factor)
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
today <- Sys.Date()
typeof(today)
attributes(today)
date <- as.Date("1970-02-01")
unclass(date)
now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct
typeof(now_ct)
attributes(now_ct)
structure(now_ct, tzone = "Asia/Tokyo")
structure(now_ct, tzone = "America/New_York")
structure(now_ct, tzone = "Australia/Lord_Howe")
structure(now_ct, tzone = "Europe/Paris")
one_week_1 <- as.difftime(1, units = "weeks")
one_week_1
typeof(one_week_1)
attributes(one_week_1)
one_week_2 <- as.difftime(7, units = "days")
one_week_2
typeof(one_week_2)
attributes(one_week_2)
#?table()
## Check the design:
# warpbreaks {datasets} The Number of Breaks in Yarn during Weaving
with(warpbreaks, table(wool, tension))
## US State Facts and Figures
# Data sets related to the 50 states of the United States of America.
table(state.division, state.region)
t <- table(state.division, state.region)
typeof(t)
attributes(t)
f1 <- factor(letters)
f1
levels(f1)
levels(f1) <- rev(levels(f1))
f1
levels(f1)
f2 <- rev(factor(letters))
f2
levels(f2)
f3 <- factor(letters, levels = rev(letters))
f3
levels(f3)
l1 <- list(
1:3,
"a",
c(TRUE, FALSE, TRUE),
c(2.3, 5.9)
)
typeof(l1)
str(l1)
lobstr::obj_size(mtcars)
l2 <- list(mtcars, mtcars, mtcars, mtcars)
lobstr::obj_size(l2)
knitr::include_graphics("diagrams/vectors/list.png")
l3 <- list(list(list(1)))
str(l3)
knitr::include_graphics("diagrams/vectors/list-recursive.png")
l4 <- list(list(1, 2), c(3, 4))
l5 <- c(list(1, 2), c(3, 4))
str(l4)
str(l5)
knitr::include_graphics("diagrams/vectors/list-c.png")
list(1:3)
as.list(1:3)
is.list(list(1:3))
is.list(as.list(1:3))
l <- list(1:3, "a", TRUE, 1.0)
dim(l) <- c(2, 2)
l
l[[1, 1]]
lobstr::ref(1:2)
1:2
lobstr::ref(list(1:2, 2))
list(1:2, 2)
#?unlist()
#?as.vector()
L<-list(1:3)
is.list(L)
is.vector(L)
L2<-as.vector(L)
is.list(L2)
is.vector(L2)
L<-list(1:3)
is.list(L)
is.vector(L)
L2<-unlist(L)
is.list(L2)
is.vector(L2)
today <- Sys.Date()
today
typeof(today)
attributes(today)
now_ct <- Sys.time()
now_ct
typeof(now_ct)
attributes(now_ct)
c(today,now_ct)
c(now_ct,today)
list(today,now_ct)
list(now_ct,today)
unlist(list(today,now_ct))
unlist(list(now_ct,today))
knitr::include_graphics("diagrams/vectors/summary-tree-s3-2.png")
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)
attributes(df1)
library(tibble)
df2 <- tibble(x = 1:3, y = letters[1:3])
typeof(df2)
attributes(df2)
df <- data.frame(
x = 1:3,
y = c("a", "b", "c")
)
str(df)
df1 <- data.frame(
x = 1:3,
y = c("a", "b", "c"),
stringsAsFactors = FALSE
)
str(df1)
df2 <- tibble(
x = 1:3,
y = c("a", "b", "c")
)
str(df2)
names(data.frame(`1` = 1))
names(tibble(`1` = 1))
data.frame(x = 1:4, y = 1:2)
data.frame(x = 1:4, y = 1:3)
tibble(x = 1:4, y = 1)
tibble(x = 1:4, y = 1:2)
tibble(
x = 1:3,
y = x * 2
)
knitr::include_graphics("diagrams/vectors/data-frame-1.png")
knitr::include_graphics("diagrams/vectors/data-frame-2.png")
df3 <- data.frame(
age = c(35, 27, 18),
hair = c("blond", "brown", "black"),
row.names = c("Bob", "Susan", "Sam")
)
df3
rownames(df3)
df3["Bob", ]
df3[c(1, 1, 1), ]
as_tibble(df3, rownames = "name")
dplyr::starwars
opts <- options(warnPartialMatchDollar = FALSE)
df1 <- data.frame(xyz = "a")
df2 <- tibble(xyz = "a")
str(df1$x)
str(df2$x)
if (!is.null(opts$warnPartialMatchDollar))
options(opts)
is.data.frame(df1)
is.data.frame(df2)
is_tibble(df1)
is_tibble(df2)
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)
data.frame(
x = 1:3,
y = I(list(1:2, 1:3, 1:4))
)
knitr::include_graphics("diagrams/vectors/data-frame-list.png")
tibble(
x = 1:3,
y = list(1:2, 1:3, 1:4)
)
dfm <- data.frame(
x = 1:3 * 10
)
dfm$y <- matrix(1:9, nrow = 3)
dfm$z <- data.frame(a = 3:1, b = letters[1:3], stringsAsFactors = FALSE)
str(dfm)
knitr::include_graphics("diagrams/vectors/data-frame-matrix.png")
dfm[1, ]
df0 <- data.frame()
str(df0)
nrow(df0)
ncol(df0)
#data.frame(row.names = c("a", "b", "b", "c"))
df <- data.frame(
age = c(35, 27, 18),
hair = c("blond", "brown", "black"))
df
str(df)
is.matrix(df)
t(df)
str(t(df))
is.matrix(t(df))
is.list(t(df))
t(t(df))
str(t(t(df)))
is.matrix(t(t(df)))
is.list(t(t(df)))
#?as.matrix
#?data.matrix()
df
as.matrix(df)
data.matrix(df)
typeof(NULL)
length(NULL)
x <- NULL
attr(x, "y") <- 1
is.null(NULL)
c()
t(df)
str(t(df))
is.matrix(t(df))
is.list(t(df))
t(t(df))
str(t(t(df)))
is.matrix(t(t(df)))
is.list(t(t(df)))
c(1, FALSE)
c("a", 1)
c(TRUE, 1L)
view(setNames)
View(setNames)
View(setNames)
?comment
# source("common.R")
# rownames(mtcars) <- NULL
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3, 1)]
x[order(x)]
# Duplicate indices will duplicate values
x[c(1, 1)]
# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]
order(x)
x[order(x)]
x[-c(3, 1)]
#    x[c(-1, 2)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x[x > 3]
x[c(TRUE, FALSE)]
# Equivalent to
x[c(TRUE, FALSE, TRUE, FALSE)]
x[c(TRUE, TRUE, NA, FALSE)]
x[]
x[0]
(y <- setNames(x, letters[1:4]))
y[c("d", "c", "a")]
# Like integer indices, you can repeat indices
y[c("a", "a", "a")]
# When subsetting with [, names are always matched exactly
z <- c(abc = 1, def = 2)
z[c("a", "d")]
y
y[factor("b")]
as.integer(factor("b"))
as.integer(factor("b","a"))
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a[1:2, ]
a[c(TRUE, FALSE, TRUE), c("B", "A")]
a[0, -2]
a[1, ]
a[1, 1]
vals <- outer(1:5, 1:5, FUN = "paste", sep = ",")
vals
vals[c(4, 15)]
select <- matrix(ncol = 2, byrow = TRUE, c(
1, 1,
3, 1,
2, 4
))
vals[select]
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[df$x == 2, ]
df[c(1, 3), ]
# There are two ways to select columns from a data frame
# Like a list
df[c("x", "z")]
# Like a matrix
df[, c("x", "z")]
# There's an important difference if you select a single
# column: matrix subsetting simplifies by default, list
# subsetting does not.
str(df["x"])
str(df[, "x"])
df <- tibble::tibble(x = 1:3, y = 3:1, z = letters[1:3])
str(df["x"])
str(df[, "x"])
a <- matrix(1:4, nrow = 2)
str(a[1, ])
str(a[1, , drop = FALSE])
df <- data.frame(a = 1:2, b = 1:2)
str(df[, "a"])
str(df[, "a", drop = FALSE])
z <- factor(c("a", "b"))
z[1]
z[1, drop = TRUE]
x <- 1:5
x[NA]
x <- list(1:3, "a", 4:6)
knitr::include_graphics("diagrams/subsetting/train.png")
knitr::include_graphics("diagrams/subsetting/train-single.png")
knitr::include_graphics("diagrams/subsetting/train-multiple.png")
options(warnPartialMatchDollar = FALSE)
var <- "cyl"
# Doesn't work - mtcars$var translated to mtcars[["var"]]
mtcars$var
# Instead use [[
mtcars[[var]]
x <- list(abc = 1)
x$a
x[["a"]]
options(warnPartialMatchDollar = TRUE)
x$a
x <- list(
a = list(1, 2, 3),
b = list(3, 4, 5)
)
purrr::pluck(x, "a", 1)
purrr::pluck(x, "c", 1)
purrr::pluck(x, "c", 1, .default = NA)
x <- 1:5
x[c(1, 2)] <- c(101, 102)
x
x <- list(a = 1, b = 2)
x[["b"]] <- NULL
str(x)
y <- list(a = 1, b = 2)
y["b"] <- list(NULL)
str(y)
mtcars[] <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
mtcars <- lapply(mtcars, as.integer)
is.data.frame(mtcars)
rm(mtcars)
x <- c("m", "f", "u", "f", "f", "m", "m")
lookup <- c(m = "Male", f = "Female", u = NA)
lookup[x]
unname(lookup[x])
grades <- c(1, 2, 2, 3, 1)
info <- data.frame(
grade = 3:1,
desc = c("Excellent", "Good", "Poor"),
fail = c(F, F, T)
)
id <- match(grades, info$grade)
id
info[id, ]
df <- data.frame(x = c(1, 2, 3, 1, 2), y = 5:1, z = letters[1:5])
# Randomly reorder
df[sample(nrow(df)), ]
# Select 3 random rows
df[sample(nrow(df), 3), ]
# Select 6 bootstrap replicates
df[sample(nrow(df), 6, replace = TRUE), ]
x <- c("b", "c", "a")
order(x)
x[order(x)]
# Randomly reorder df
df2 <- df[sample(nrow(df)), 3:1]
df2
df2[order(df2$x), ]
df2[, order(names(df2))]
df <- data.frame(x = c(2, 4, 1), y = c(9, 11, 6), n = c(3, 5, 1))
rep(1:nrow(df), df$n)
df[rep(1:nrow(df), df$n), ]
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df$z <- NULL
df <- data.frame(x = 1:3, y = 3:1, z = letters[1:3])
df[c("x", "y")]
df[setdiff(names(df), "z")]
mtcars[mtcars$gear == 5, ]
mtcars[mtcars$gear == 5 & mtcars$cyl == 4, ]
x <- sample(10) < 4
which(x)
unwhich <- function(x, n) {
out <- rep_len(FALSE, n)
out[x] <- TRUE
out
}
unwhich(which(x), 10)
(x1 <- 1:10 %% 2 == 0)
(x2 <- which(x1))
(y1 <- 1:10 %% 5 == 0)
(y2 <- which(y1))
# X & Y <-> intersect(x, y)
x1 & y1
intersect(x2, y2)
# X | Y <-> union(x, y)
x1 | y1
union(x2, y2)
# X & !Y <-> setdiff(x, y)
x1 & !y1
setdiff(x2, y2)
# xor(X, Y) <-> setdiff(union(x, y), intersect(x, y))
xor(x1, y1)
setdiff(union(x2, y2), intersect(x2, y2))
x <- c(2.1, 4.2, 3.3, 5.4)
x[c(3, 1)]
x[order(x)]
# Duplicate indices will duplicate values
x[c(1, 1)]
# Real numbers are silently truncated to integers
x[c(2.1, 2.9)]
order(x)
x[order(x)]
x[-c(3, 1)]
x[c(TRUE, TRUE, FALSE, FALSE)]
x[x > 3]
x[c(TRUE, FALSE)]
# Equivalent to
x[c(TRUE, FALSE, TRUE, FALSE)]
x[c(TRUE, TRUE, NA, FALSE)]
x[]
x[0]
(y <- setNames(x, letters[1:4]))
y[c("d", "c", "a")]
# Like integer indices, you can repeat indices
y[c("a", "a", "a")]
# When subsetting with [, names are always matched exactly
z <- c(abc = 1, def = 2)
z[c("a", "d")]
y
y[factor("b")]
as.integer(factor("b"))
as.integer(factor("b","a"))
a <- matrix(1:9, nrow = 3)
colnames(a) <- c("A", "B", "C")
a[1:2, ]
a[c(TRUE, FALSE, TRUE), c("B", "A")]
a[0, -2]
a[1, ]
a[1, 1]
vals <- outer(1:5, 1:5, FUN = "paste", sep = ",")
vals
vals[c(4, 15)]
a <- matrix(1:4, nrow = 2)
str(a[1, ])
str(a[1, , drop = FALSE])
df <- data.frame(a = 1:2, b = 1:2)
str(df[, "a"])
str(df[, "a", drop = FALSE])
z <- factor(c("a", "b"))
z[1]
z[1, drop = TRUE]
mtcars[mtcars$cyl = 4, ]
str(mtcars)
#mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]
mtcars[-1:4, ]
#mtcars[-1:4, ]
mtcars[-(1:4), ]
#mtcars[-1:4, ]
mtcars[-c(1:4), ]
mtcars[mtcars$cyl <= 5]
#mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl <= 5, ]
mtcars[mtcars$cyl == 4 | 6, ]
#mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]
mtcars[mtcars$cyl %in% c(4, 6), ]
str(mtcars)
df[is.na(df)] <- 0
df
str(df)
