levels=c("mm","cm","m")) ## size order
tmp
Position(f(x){x = "mm"},tmp)
Position(which(x == "mm"),tmp)
Position("mm",tmp)
f4(sample, c(1,2))
Position(sample, c(1,2))
sample
ndvar(10);ndunc(21)
pmin(x, 0)
x <- mcstoc(rnorm, "V")
View(X)
pmin(x, 0)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
f5(x1, x2)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
f5(x1, x2)
x1 <- c(2, 8, 3, 4, 1, 5)               # First example vector
x2 <- c(0, 7, 5, 5, 6, 1)               # Second example vector
pmin(x1, x2)
f5(x1, x2)
```{r}
x <- c(T,T,F)
y <- c(T,T,T)
all(x)
allC(x)
all(y)
allC(y)
a1 <- c(T,T,F,T,T,F)
a2 <- c(T,T,T,T,T,T)
all(a1)
allC(a1)
all(a2)
allC(a2)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
# add works like a regular R function
add
add(1, 2, 3)
?Position
Position(f,x)
f <- f(x) x=5
f <- f(x) x>5
f <- function(x) x>5
x = 1:10
Position(f,x)
x
f <- function(x) x=5
x = 1:10
x
Position(f,x)
f <- function(x) x>5
x = 1:10
x
Position(f,x)
library(Rcpp)
mod <- lm(mpg ~ wt, data = mtcars)
mpe(mod)
library(Rcpp)
mod <- lm(mpg ~ wt, data = mtcars)
mpe(mod)
minC(c(2:4, NA))
minC(c(2:4, NA), na_rm = TRUE)
minC(c(NA, NA), na_rm = TRUE)
anyC(c(NA, TRUE))  # any(c(NA, TRUE)) would return TRUE in this case
anyC(c(NA, TRUE), na_rm = TRUE)
anyC(c(NA, TRUE))  # any(c(NA, TRUE)) would return TRUE in this case
anyC(c(NA, TRUE), na_rm = TRUE)
cumsumC(c(1, NA, 2, 4))
result1 <- cumsumC(c(1, 2, NA, 4, NA, 3))
result2 <- cumsumC(c(1, 2, NA, 4, NA, 3), na_rm = TRUE)
print(result1)
print(result2)
result1 <- anyC(c(TRUE, FALSE, NA, TRUE))
result2 <- anyC(c(TRUE, FALSE, NA, TRUE), na_rm = TRUE)
print(result1)
print(result2)
result1 <- minC(c(3, 1, 2, 4, NA))
result2 <- minC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- minC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- cumsumC(c(1, 2, NA, 4, NA, 3))
result2 <- cumsumC(c(1, 2, NA, 4, NA, 3), na_rm = TRUE)
print(result1)
print(result2)
result1 <- diffC(c(1, NA, 3, 5, NA, 10, 12), lag = 2)
result1 <- diffC(c(1, NA, 3, 5, NA, 10, 12), lag = 2)
result2 <- diffC(c(1, NA, 3, 5, NA, 10, 12), lag = 2, na_rm = TRUE)
print(result1)
print(result2)
result1 <- maxC(c(3, 1, 2, 4, NA))
result1 <- maxC(c(3, 1, 2, 4, NA))
result2 <- maxC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- maxC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
#include <Rcpp.h>
using namespace Rcpp;
result1 <- rangeC(c(3, 1, 2, 4, NA))
result2 <- rangeC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- rangeC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
#include <Rcpp.h>
using namespace Rcpp;
result1 <- meanC(c(3, 1, 2, 4, NA))
result2 <- meanC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- meanC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- varC(c(3, 1, 2, 4, NA))
result2 <- varC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- varC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- meanC(c(3, 1, 2, 4, NA))
result2 <- meanC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- meanC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
result1 <- varC(c(3, 1, 2, 4, NA))
result2 <- varC(c(3, 1, 2, 4, NA), na_rm = TRUE)
result3 <- varC(c(NA, NA, NA), na_rm = TRUE)
print(result1)
print(result2)
print(result3)
diff(c(1, NA, 3, 5, NA, 10, 12))
diff(c(1, NA, 3, 5, NA, 10, 12), lag = 2)
library(Rcpp)
# Compile the C++ code
cppFunction(cppCode)
library(Rcpp)
# Compile the C++ code
cppFunction(cppCode)
# Define the C++ code (previously shown) and compile it
cppCode <- '
#include <algorithm>  // Include the C++ standard algorithms library
#include <Rcpp.h>     // Include Rcpp, a package for interfacing R and C++
using namespace Rcpp;  // Import the Rcpp namespace for convenience
// Declare a function named 'medianC' with the attribute [[Rcpp::export]]
# Define new test vectors
test_vector1 <- c(2, 4, 6, 8, 10)     # Even-sized vector
test_vector2 <- c(3, 1, 4, 1, 5, 9)  # Odd-sized vector
# Test the medianC function with the new vectors
medianC_result1 <- medianC(test_vector1)
library(Rcpp)
# Define new test vectors
test_vector1 <- c(2, 4, 6, 8, 10)     # Even-sized vector
test_vector2 <- c(3, 1, 4, 1, 5, 9)  # Odd-sized vector
# Test the medianC function with the new vectors
medianC_result1 <- medianC(test_vector1)
medianC_result2 <- medianC(test_vector2)
# Print the results
cat("Using medianC function:\n")
cat("Median of test_vector1:", medianC_result1, "\n")
cat("Median of test_vector2:", medianC_result2, "\n")
library(Rcpp)
library(Rcpp)
# Define new test vectors
test_vector1 <- c(2, 4, 6, 8, 10)     # Even-sized vector
test_vector2 <- c(3, 1, 4, 1, 5, 9)  # Odd-sized vector
# Test the medianC function with the new vectors
medianC_result1 <- medianC(test_vector1)
medianC_result2 <- medianC(test_vector2)
# Print the results
cat("Using medianC function:\n")
cat("Median of test_vector1:", medianC_result1, "\n")
cat("Median of test_vector2:", medianC_result2, "\n")
# Define vectors for testing
x <- c("apple", "banana", "cherry")
query_vector <- c("banana", "date")
# Test the inC function with different vectors
result1 <- query_vector %in% x
result2 <- inC(query_vector, x)
# Define vectors for testing
x <- c("apple", "banana", "cherry")
query_vector <- c("banana", "date")
# Test the inC function with different vectors
result1 <- query_vector %in% x
result2 <- inC(query_vector, x)
library(Rcpp)
# Define new test vectors
test_vector1 <- c(2, 4, 6, 8, 10)     # Even-sized vector
test_vector2 <- c(3, 1, 4, 1, 5, 9)  # Odd-sized vector
# Test the medianC function with the new vectors
medianC_result1 <- medianC(test_vector1)
medianC_result2 <- medianC(test_vector2)
# Print the results
cat("Using medianC function:\n")
cat("Median of test_vector1:", medianC_result1, "\n")
cat("Median of test_vector2:", medianC_result2, "\n")
# Define vectors for testing
x <- c("apple", "banana", "cherry")
query_vector <- c("banana", "date")
# Test the inC function with different vectors
result1 <- query_vector %in% x
result2 <- inC(query_vector, x)
# Print the results
cat("Using %in% operator in R:\n")
cat("Membership check:", result1, "\n\n")
cat("Using inC function (C++):\n")
cat("Membership check:", result2, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueC(x)
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueC(x)
library(Rcpp)
# Define new test vectors
test_vector1 <- c(2, 4, 6, 8, 10)     # Even-sized vector
test_vector2 <- c(3, 1, 4, 1, 5, 9)  # Odd-sized vector
# Test the medianC function with the new vectors
medianC_result1 <- medianC(test_vector1)
medianC_result2 <- medianC(test_vector2)
# Print the results
cat("Using medianC function:\n")
cat("Median of test_vector1:", medianC_result1, "\n")
cat("Median of test_vector2:", medianC_result2, "\n")
# Define vectors for testing
x <- c("apple", "banana", "cherry")
query_vector <- c("banana", "date")
# Test the inC function with different vectors
result1 <- query_vector %in% x
result2 <- inC(query_vector, x)
# Print the results
cat("Using %in% operator in R:\n")
cat("Membership check:", result1, "\n\n")
cat("Using inC function (C++):\n")
cat("Membership check:", result2, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueC(x)
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueC(x)
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueCC(x)
# Print the results
cat("Using R's built-in 'unique' function:\n")
cat("Unique elements:", result1, "\n\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result2, "\n")
# Define a test vector
x <- c(5, 12, 7, 1, 9, 15, 2, 8)
# Find the minimum and maximum values using R's built-in functions
min_result_r <- min(x)
max_result_r <- max(x)
# Find the minimum and maximum values using the 'minC' and 'maxC' functions (C++)
min_result_c <- minC(x)
max_result_c <- maxC(x)
# Print and compare the results
cat("Using R's built-in 'min' function:\n")
cat("Minimum value:", min_result_r, "\n")
cat("Maximum value:", max_result_r, "\n\n")
cat("Using 'minC' and 'maxC' functions (C++):\n")
cat("Minimum value:", min_result_c, "\n")
cat("Maximum value:", max_result_c, "\n")
# Define a test vector
x <- c(5, 12, 7, 1, 9, 15, 2, 8)
# Find the index of the minimum and maximum values using R's built-in functions
which_min_result_r <- which.min(x)
which_max_result_r <- which.max(x)
# Find the index of the minimum and maximum values using the 'which_minC' and 'which_maxC' functions (C++)
which_min_result_c <- which_minC(x)
which_max_result_c <- which_maxC(x)
# Print and compare the results
cat("Using R's built-in 'which.min' and 'which.max' functions:\n")
cat("Index of minimum value:", which_min_result_r, "\n")
cat("Index of maximum value:", which_max_result_r, "\n\n")
cat("Using 'which_minC' and 'which_maxC' functions (C++):\n")
cat("Index of minimum value:", which_min_result_c, "\n")
cat("Index of maximum value:", which_max_result_c, "\n")
# Define new test vectors
x <- c(1, 2, 3, 4, 5, 6, 7)
y <- c(4, 5, 6, 7, 8, 9, 10)
# Find the union, intersection, and set difference using the C++ functions
union_result_c <- unionC(x, y)
# Define new test vectors
x <- c(1, 2, 3, 4, 5, 6, 7)
y <- c(4, 5, 6, 7, 8, 9, 10)
# Find the union, intersection, and set difference using the C++ functions
union_result_c <- unionC(x, y)
intersect_result_c <- intersectC(x, y)
setdiff_result_c <- setdiffC(x, y)
# Print the results
cat("Union (C++):\n")
cat(union_result_c, "\n")
cat("Intersection (C++):\n")
cat(intersect_result_c, "\n")
cat("Set Difference (C++):\n")
cat(setdiff_result_c, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueCC(x)
# Print the results
cat("Using R's built-in 'unique' function:\n")
cat("Unique elements:", result1, "\n\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result2, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueCC(x)
result3 <- uniqueC(x)
# Print the results
cat("Using R's built-in 'unique' function:\n")
cat("Unique elements:", result1, "\n\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result2, "\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result3, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueCC(x)
result3 <- uniqueC(x)
# Print the results
cat("Using R's built-in 'unique' function:\n")
cat("Unique elements:", result1, "\n\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result2, "\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result3, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueCC(x)
result3 <- uniqueC(x)
# Print the results
cat("Using R's built-in 'unique' function:\n")
cat("Unique elements:", result1, "\n\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result2, "\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result3, "\n")
library(Rcpp)
# Define new test vectors
test_vector1 <- c(2, 4, 6, 8, 10)     # Even-sized vector
test_vector2 <- c(3, 1, 4, 1, 5, 9)  # Odd-sized vector
# Test the medianC function with the new vectors
medianC_result1 <- medianC(test_vector1)
medianC_result2 <- medianC(test_vector2)
# Print the results
cat("Using medianC function:\n")
cat("Median of test_vector1:", medianC_result1, "\n")
cat("Median of test_vector2:", medianC_result2, "\n")
# Define vectors for testing
x <- c("apple", "banana", "cherry")
query_vector <- c("banana", "date")
# Test the inC function with different vectors
result1 <- query_vector %in% x
result2 <- inC(query_vector, x)
# Print the results
cat("Using %in% operator in R:\n")
cat("Membership check:", result1, "\n\n")
cat("Using inC function (C++):\n")
cat("Membership check:", result2, "\n")
# Define the test vector
x <- c(5, 5, 3, 1, 3, 8, 2, 8)
# Find unique elements using R's built-in 'unique' function
result1 <- unique(x)
# Find unique elements using the 'uniqueC' function (C++)
result2 <- uniqueCC(x)
result3 <- uniqueC(x)
result4 <- uniqueCCC(x)
# Print the results
cat("Using R's built-in 'unique' function:\n")
cat("Unique elements:", result1, "\n\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result2, "\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result3, "\n")
cat("Using 'uniqueC' function (C++):\n")
cat("Unique elements:", result4, "\n")
# Define a test vector
x <- c(5, 12, 7, 1, 9, 15, 2, 8)
# Find the minimum and maximum values using R's built-in functions
min_result_r <- min(x)
max_result_r <- max(x)
# Find the minimum and maximum values using the 'minC' and 'maxC' functions (C++)
min_result_c <- minC(x)
max_result_c <- maxC(x)
# Print and compare the results
cat("Using R's built-in 'min' function:\n")
cat("Minimum value:", min_result_r, "\n")
cat("Maximum value:", max_result_r, "\n\n")
cat("Using 'minC' and 'maxC' functions (C++):\n")
cat("Minimum value:", min_result_c, "\n")
cat("Maximum value:", max_result_c, "\n")
# Define a test vector
x <- c(5, 12, 7, 1, 9, 15, 2, 8)
# Find the index of the minimum and maximum values using R's built-in functions
which_min_result_r <- which.min(x)
which_max_result_r <- which.max(x)
# Find the index of the minimum and maximum values using the 'which_minC' and 'which_maxC' functions (C++)
which_min_result_c <- which_minC(x)
which_max_result_c <- which_maxC(x)
# Print and compare the results
cat("Using R's built-in 'which.min' and 'which.max' functions:\n")
cat("Index of minimum value:", which_min_result_r, "\n")
cat("Index of maximum value:", which_max_result_r, "\n\n")
cat("Using 'which_minC' and 'which_maxC' functions (C++):\n")
cat("Index of minimum value:", which_min_result_c, "\n")
cat("Index of maximum value:", which_max_result_c, "\n")
# Define new test vectors
x <- c(1, 2, 3, 4, 5, 6, 7)
y <- c(4, 5, 6, 7, 8, 9, 10)
# Find the union, intersection, and set difference using the C++ functions
union_result_c <- unionC(x, y)
intersect_result_c <- intersectC(x, y)
setdiff_result_c <- setdiffC(x, y)
# Print the results
cat("Union (C++):\n")
cat(union_result_c, "\n")
cat("Intersection (C++):\n")
cat(intersect_result_c, "\n")
cat("Set Difference (C++):\n")
cat(setdiff_result_c, "\n")
gibbs_r <- function(N, thin) {
mat <- matrix(nrow = N, ncol = 2)
x <- y <- 0
for (i in 1:N) {
for (j in 1:thin) {
x <- rgamma(1, 3, y * y + 4)
y <- rnorm(1, 1 / (x + 1), 1 / sqrt(2 * (x + 1)))
}
mat[i, ] <- c(x, y)
}
mat
}
bench::mark(
gibbs_r(100, 10),
gibbs_cpp(100, 10),
check = FALSE
)
vacc1a <- function(age, female, ily) {
p <- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily
p <- p * if (female) 1.25 else 0.75
p <- max(0, p)
p <- min(1, p)
p
}
vacc1 <- function(age, female, ily) {
n <- length(age)
out <- numeric(n)
for (i in seq_len(n)) {
out[i] <- vacc1a(age[i], female[i], ily[i])
}
out
}
vacc2 <- function(age, female, ily) {
p <- 0.25 + 0.3 * 1 / (1 - exp(0.04 * age)) + 0.1 * ily
p <- p * ifelse(female, 1.25, 0.75)
p <- pmax(0, p)
p <- pmin(1, p)
p
}
n <- 1000
age <- rnorm(n, mean = 50, sd = 10)
female <- sample(c(T, F), n, rep = TRUE)
ily <- sample(c(T, F), n, prob = c(0.8, 0.2), rep = TRUE)
stopifnot(
all.equal(vacc1(age, female, ily), vacc2(age, female, ily)),
all.equal(vacc1(age, female, ily), vacc3(age, female, ily))
)
bench::mark(
vacc1 = vacc1(age, female, ily),
vacc2 = vacc2(age, female, ily),
vacc3 = vacc3(age, female, ily)
)
