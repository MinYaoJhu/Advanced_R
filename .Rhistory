logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
pairlist = purrr::some(x, logical_abbr_rec),
call = find_T_call(x)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
pairlist = purrr::some(x, logical_abbr_rec),
call = find_T_call(x)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
logical_abbr(f)
logical_abbr(!!f)
# updated
find_T_call <- function(x) {
if (is_call(x, "T")) {
x <- as.list(x)[-1]
purrr::some(x, logical_abbr_rec)
} else {
purrr::some(x, logical_abbr_rec)
}
}
logical_abbr_rec <- function(x) {
switch_expr(
x,
# Base cases
constant = FALSE,
symbol = as_string(x) %in% c("F", "T"),
# Recursive cases
call = find_T_call(x),
pairlist = purrr::some(x, logical_abbr_rec)
)
}
logical_abbr <- function(x) {
logical_abbr_rec(enexpr(x))
}
logical_abbr(T(1, 2, 3))
logical_abbr(T(T, T(3, 4)))
logical_abbr(T(T))
logical_abbr(T())
logical_abbr()
logical_abbr(c(T, T, T))
logical_abbr(function(x = TRUE) {
g(x + T)
})
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
logical_abbr(f)
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
logical_abbr(!!f)
logical_abbr(!f)
f <- function(x = TRUE) {
g(x + T)
}
logical_abbr(f)
f <- quote(function(x = TRUE) {
g(x + T)
})
logical_abbr(!f)
logical_abbr(!!f)
library(rlang)
library(lobstr)
ast(names(x) <- y)
if (is_call(x, "<-") && is_call(x[[2]])) {
lhs <- expr_text(x[[2]])
children <- as.list(x)[-1]
}
library(rlang)
library(purrr)
library(rlang)
library(purrr)
paste("Good", "morning", "Hadley")
paste("Good", "afternoon", "Alice")
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
cement(Good, afternoon, Alice)
name <- "Hadley"
time <- "morning"
paste("Good", time, name)
cement(Good, time, name)
cement(Good, !!time, !!name)
paste("Good", time, name)
cement(Good, !!time, !!name)
# works
library(MASS)
# fails
MASS
library(MASS)
MASS
mtcars2 <- subset(mtcars, cyl == 4)
mtcars2
mtcars
cyl
with(mtcars2, sum(vs))
vs
sum(mtcars2$am)
am
rm(mtcars2)
mtcars2
with(mtcars2, sum(vs))
library(MASS)
mtcars2 <- subset(mtcars, cyl == 4)
with(mtcars2, sum(vs))
sum(mtcars2$am)
rm(mtcars2)
library(MASS)
MASS
mtcars2 <- subset(mtcars, cyl == 4)
mtcars2
mtcars
cyl
with(mtcars2, sum(vs))
vs
with(mtcars2, sum(vs))
mtcars2
vs
mtcars2$am
rm
library(dplyr)
library(ggplot2)
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
library(dplyr)
library(ggplot2)
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
library(dplyr)
dplyr
ggplot2
library(ggplot2)
ggplot2
mtcars
cyl
mpg
mean = mean(mpg)
cyl
mean = mean(mpg)
dplyr::summarise
dplyr:::summarise.data.frame
dplyr:::summarise_cols
library(dplyr)
dplyr
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
by_cyl
aes(cyl, mean)
cyl
mean
mean
ggplot2::aes
library(rlang)
library(purrr)
paste("Good", "morning", "Hadley")
paste("Good", "afternoon", "Alice")
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
cement(Good, afternoon, Alice)
name <- "Hadley"
time <- "morning"
paste("Good", time, name)
cement(Good, time, name)
cement(Good, !!time, !!name)
# works
library(MASS)
# fails
MASS
library(MASS)
mtcars2 <- subset(mtcars, cyl == 4)
with(mtcars2, sum(vs))
sum(mtcars2$am)
rm(mtcars2)
library(MASS)
MASS
library(ggplot2)
ggplot2
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
mtcars
cyl
mean = mean(mpg)
mpg
dplyr::summarise
dplyr:::summarise.data.frame
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
by_cyl
aes(cyl, mean)
cyl
mean
expr(x + y)
expr(1 / 2 / 3)
f1 <- function(x) expr(x)
f1(a + b + c)
f2 <- function(x) enexpr(x)
f2(a + b + c)
f <- function(...) enexprs(...)
f(x = 1, y = 10 * z)
exprs(x = x ^ 2, y = y ^ 3, z = z ^ 4)
# shorthand for
# list(x = expr(x ^ 2), y = expr(y ^ 3), z = expr(z ^ 4))
f <- function(...) ensyms(...)
f(x)
f("x")
f(1)
f(1)
f <- function(...) ensyms(...)
f(x)
f("x")
library(rlang)
library(purrr)
expr
f1 <- function(x, y) {
exprs(x = x, y = y)
}
f2 <- function(x, y) {
enexprs(x = x, y = y)
}
f1(a + b, c + d)
f2(a + b, c + d)
f1(a + b, c + d)
f2(a + b, c + d)
enexpr(x + y)
enexpr()
is_missing(enexpr())
enexpr()
is_missing(enexpr())
exprs(a)
str(exprs(a))
exprs(a)
str(exprs(a))
exprs(a = )
str(exprs(a = ))
exprs(a = )
str(exprs(a = ))
is_missing(exprs(a = ))
test_exprs <- exprs(a = )
is_missing(test_exprs)
is_missing(test_exprs$a)
exprs(a = )
str(exprs(a = ))
test_exprs <- exprs(a = )
is_missing(test_exprs$a)
exprs(
...,
.named = FALSE,
.ignore_empty = c("trailing", "none", "all"),
.unquote_names = TRUE
)
# exprs(
#   ...,
#   .named = FALSE,
#   .ignore_empty = c("trailing", "none", "all"),
#   .unquote_names = TRUE
# )
my_env <- env()
substitute(x, my_env)
evaluate_expression <- function(x) substitute(x)
evaluate_expression(x + y * sin(0))
my_env$x <- 7
substitute(x, my_env)
x <- 7
substitute(x, .GlobalEnv)
my_env$x <- 7
substitute(x, my_env)
x <- 7
substitute(x, .GlobalEnv)
new_env <- env()
substitute(x, new_env)
evaluate_expression <- function(x) substitute(x)
evaluate_expression(x + y * sin(0))
new_env$x <- 7
substitute(x, new_env)
x <- 7
substitute(x, .GlobalEnv)
new_env <- env()
substitute(x, new_env)
evaluate_expression <- function(x) substitute(x)
evaluate_expression(x + y * a / b)
new_env$x <- 7
substitute(x, new_env)
x <- 7
substitute(x, .GlobalEnv)
f1(a + b, c + d)
f2(a + b, c + d)
enexpr(x + y)
enexpr()
is_missing(enexpr())
library(rlang)
library(purrr)
paste("Good", "morning", "Hadley")
paste("Good", "afternoon", "Alice")
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
cement(Good, afternoon, Alice)
name <- "Hadley"
time <- "morning"
paste("Good", time, name)
cement(Good, time, name)
cement(Good, !!time, !!name)
dplyr::summarise
dplyr:::summarise.data.frame
ggplot2::aes
expr(x + y)
expr(1 / 2 / 3)
f1 <- function(x) expr(x)
f1(a + b + c)
f2 <- function(x) enexpr(x)
f2(a + b + c)
f <- function(...) enexprs(...)
f(x = 1, y = 10 * z)
f <- function(...) ensyms(...)
f(x)
f("x")
quote(x + y)
f3 <- function(x) substitute(x)
f3(x + y)
alist(x = 1, y = x + 2)
f <- function(...) as.list(substitute(...()))
f(x = 1, y = 10 * z)
f4 <- function(x) substitute(x * 2)
f4(a + b + c)
substitute(x * y * z, list(x = 10, y = quote(a + b)))
expr
enexpr()
is_missing(enexpr())
exprs(a)
str(exprs(a))
exprs(a = )
str(exprs(a = ))
test_exprs <- exprs(a = )
is_missing(test_exprs$a)
# Usage
# list(...)
# exprs(
#   ...,
#   .named = FALSE,
#   .ignore_empty = c("trailing", "none", "all"),
#   .unquote_names = TRUE
# )
new_env <- env()
substitute(x, new_env)
evaluate_expression <- function(x) substitute(x)
evaluate_expression(x + y * a / b)
new_env$x <- 7
substitute(x, new_env)
x <- 7
substitute(x, .GlobalEnv)
library(rlang)
library(purrr)
paste("Good", "morning", "Hadley")
paste("Good", "afternoon", "Alice")
cement <- function(...) {
args <- ensyms(...)
paste(purrr::map(args, as_string), collapse = " ")
}
cement(Good, morning, Hadley)
cement(Good, afternoon, Alice)
name <- "Hadley"
time <- "morning"
paste("Good", time, name)
cement(Good, time, name)
cement(Good, !!time, !!name)
dplyr::summarise
dplyr:::summarise.data.frame
ggplot2::aes
expr(x + y)
expr(1 / 2 / 3)
f1 <- function(x) expr(x)
f1(a + b + c)
f2 <- function(x) enexpr(x)
f2(a + b + c)
f <- function(...) enexprs(...)
f(x = 1, y = 10 * z)
f <- function(...) ensyms(...)
f(x)
f("x")
quote(x + y)
f3 <- function(x) substitute(x)
f3(x + y)
alist(x = 1, y = x + 2)
f <- function(...) as.list(substitute(...()))
f(x = 1, y = 10 * z)
f4 <- function(x) substitute(x * 2)
f4(a + b + c)
substitute(x * y * z, list(x = 10, y = quote(a + b)))
expr
enexpr()
is_missing(enexpr())
exprs(a)
str(exprs(a))
exprs(a = )
str(exprs(a = ))
test_exprs <- exprs(a = )
is_missing(test_exprs$a)
# Usage
# list(...)
# exprs(
#   ...,
#   .named = FALSE,
#   .ignore_empty = c("trailing", "none", "all"),
#   .unquote_names = TRUE
# )
new_env <- env()
substitute(x, new_env)
evaluate_expression <- function(x) substitute(x)
evaluate_expression(x + y * a / b)
new_env$x <- 7
substitute(x, new_env)
x <- 7
substitute(x, .GlobalEnv)
# works
library(MASS)
# fails
MASS
library(MASS)
mtcars2 <- subset(mtcars, cyl == 4)
with(mtcars2, sum(vs))
sum(mtcars2$am)
rm(mtcars2)
library(MASS)
MASS
mtcars2 <- subset(mtcars, cyl == 4)
mtcars2
mtcars
cyl
mtcars2
vs
sum(vs)
rm(mtcars2)
mtcars2
library(dplyr)
library(ggplot2)
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
ggplot(by_cyl, aes(cyl, mean)) + geom_point()
library(dplyr)
dplyr
by_cyl <- mtcars %>%
group_by(cyl) %>%
summarise(mean = mean(mpg))
mtcars
cyl
mean = mean(mpg)
mpg
mean = mean(mpg)
enexpr
