# The levels argument is optional.
# If it's not provided, the function will use the unique values of x as the levels.
factor2 <- function(x = character(), levels = unique(x)) {
# uses match() to create a new factor with the same levels as x,
# but with the values in the order of the levels argument.
new_levels <- match(x, levels)
# Error if levels don't include all values
# uses setdiff() to find any values in x that are not in the levels argument.
missing <- unique(setdiff(x, levels))
# If there are any missing values, the function stops with an error message.
if (length(missing) > 0) {
stop(
"The following values are missing in the levels of x: ",
paste0("'", missing, "'", collapse = ", "), ".",
call. = FALSE
)
}
# uses validate_factor() to make sure the new factor is valid.
validate_factor(new_factor(new_levels, levels))
}
# Test
factor2(c("a", "b", "c", "d"), levels = c("a", "b"))
# The levels argument is optional.
# If it's not provided, the function will use the unique values of x as the levels.
factor2 <- function(x = character(), levels = unique(x)) {
# Error if levels don't include all values
# uses setdiff() to find any values in x that are not in the levels argument.
missing <- unique(setdiff(x, levels))
# If there are any missing values, the function stops with an error message.
if (length(missing) > 0) {
stop(
"The following values are missing in the levels of x: ",
paste0("'", missing, "'", collapse = ", "), ".",
call. = FALSE
)
}
# uses match() to create a new factor with the same levels as x,
# but with the values in the order of the levels argument.
new_levels <- match(x, levels)
# uses validate_factor() to make sure the new factor is valid.
validate_factor(new_factor(new_levels, levels))
}
# Test
factor2(c("a", "b", "c", "d"), levels = c("a", "b"))
S <- cards()
if(!require('prob')) {
install.packages('prob')
library('prob')
}
A <- c("a", "b", "c", "d")
B <- c("a", "b")
setdiff(B, A)
A <- c("a", "b", "c", "d")
B <- c("a", "b")
setdiff(B, A)
setdiff(A, B)
A <- c("a", "b", "c", "d")
B <- c("a", "b")
setdiff(A, B)
match(A,B)
# Test
new_factor(c("a", "b", "c", "d"), levels = c("a", "b"))
validate_factor(new_factor(c("a", "b", "c", "d"), levels = c("a", "b"))
validate_factor(new_factor(c("a", "b", "c", "d"), levels = c("a", "b"))
# The levels argument is optional.
# If it's not provided, the function will use the unique values of x as the levels.
factor2 <- function(x = character(), levels = unique(x)) {
# Error if levels don't include all values
# uses setdiff() to find any values in x that are not in the levels argument.
missing <- unique(setdiff(x, levels))
# If there are any missing values, the function stops with an error message.
if (length(missing) > 0) {
stop(
"The following values are missing in the levels of x: ",
paste0("'", missing, "'", collapse = ", "), ".",
call. = FALSE
)
}
# uses match() to create a new factor with the same levels as x,
# but with the values in the order of the levels argument.
ind <- match(x, levels)
# uses validate_factor() to make sure the new factor is valid.
validate_factor(new_factor(ind , levels))
}
# Test
factor2(c("a", "b", "c", "d"), levels = c("a", "b"))
mean
my_new_generic <- function(x) {
UseMethod("my_new_generic")
}
x <- Sys.Date()
s3_dispatch(print(x))
library(sloop)
mean
my_new_generic <- function(x) {
UseMethod("my_new_generic")
}
x <- Sys.Date()
s3_dispatch(print(x))
x <- matrix(1:10, nrow = 2)
s3_dispatch(mean(x))
s3_dispatch(sum(Sys.time()))
s3_methods_generic("mean")
s3_methods_class("ordered")
x <- structure(1:10, class = "test")
t(x)
t
t.test
s3_methods_generic("t.test")
s3_methods_class("t.test")
s3_dispatch(""t.test")
s3_dispatch("t.test")
s3_dispatch(t.test(1:10, y = c(7:20)))
ftype(t.test)
tools::nonS3methods("stats")
x <- structure(1:10, class = "test")
t(x)
s3_methods_class("table")
s3_methods_class("ecdf")
nrow(s3_methods_generic("plot"))
nrow(s3_methods_generic("plot"))
nrow(s3_methods_generic("print"))
nrow(s3_methods_generic("quantile"))
nrow(s3_methods_generic("summary"))
library(purrr)
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
names() %>%
keep(is_s3_generic) %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
flatten_int() %>%
sort(decreasing = TRUE) %>%
head()
ls(all.names = TRUE, env = baseenv())
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv())
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function)
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
names()
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
names() %>%
keep(is_s3_generic)
s3_generic <- ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
names() %>%
keep(is_s3_generic)
s3_generic
s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x))
s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
flatten_int()
s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
as.data.frame()
s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x))
s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
flatten_dfr()
n_meth_s3_generic <- s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
flatten_dfr()
n_meth_s3_generic <- s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
flatten_dfr()
n_meth_s3_generic
str(n_meth_s3_generic)
n_meth_s3_generic %>%
pivot_longer(
names_to = "generic_name",
values_to = "n_methods")
library(sloop)
library(tidyverse)
n_meth_s3_generic %>%
pivot_longer(
names_to = "generic_name",
values_to = "n_methods")
n_meth_s3_generic %>%
pivot_longer(
everything(),
names_to = "generic_name",
values_to = "n_methods")
long_n_meth_s3_generic <- n_meth_s3_generic %>%
pivot_longer(
everything(),
names_to = "generic_name",
values_to = "n_methods")
long_n_meth_s3_generic
long_n_meth_s3_generic %>%
arrange(n_methods)
long_n_meth_s3_generic %>%
arrange(desc(n_methods))
long_n_meth_s3_generic %>%
arrange(desc(n_methods)) %>%
head()
long_n_meth_s3_generic %>%
filter(n_methods == max(n_methods))
long_n_meth_s3_generic %>%
filter(n_methods == max(n_methods))
long_n_meth_s3_generic %>%
arrange(desc(n_methods)) %>%
head()
long_n_meth_s3_generic <- n_meth_s3_generic %>%
pivot_longer(
everything(),
names_to = "generic_name",
values_to = "n_methods")
long_n_meth_s3_generic
nrow(s3_methods_generic("plot"))
nrow(s3_methods_generic("print"))
nrow(s3_methods_generic("quantile"))
nrow(s3_methods_generic("summary"))
s3_generic <- ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
names() %>%
keep(is_s3_generic)
s3_generic
s3_generic <- ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function & is_s3_generic)
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function)
ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
keep(is_s3_generic)
base_function <- ls(all.names = TRUE, env = baseenv()) %>%
mget(envir = baseenv()) %>%
keep(is_function) %>%
names()
base_function
str(base_function)
s3_generic <- base_function %>%
keep(is_s3_generic)
str(s3_generic)
n_meth_s3_generic <- s3_generic %>%
map(~ set_names(nrow(s3_methods_generic(.x)), .x)) %>%
flatten_dfr()
n_meth_s3_generic
str(n_meth_s3_generic)
long_n_meth_s3_generic <- n_meth_s3_generic %>%
pivot_longer(
everything(),
names_to = "generic_name",
values_to = "n_methods")
long_n_meth_s3_generic
long_n_meth_s3_generic %>%
arrange(desc(n_methods)) %>%
head()
long_n_meth_s3_generic %>%
filter(n_methods == max(n_methods))
g <- function(x) {
x <- 10
y <- 10
UseMethod("g")
}
g.default <- function(x) c(x = x, y = y)
x <- 1
y <- 1
g(x)
g <- function(x) {
x <- 10
y <- 10
UseMethod("g")
}
g.default <- function(x) c(x = x, y = y)
x <- 1
y <- 1
g(x)
g.default(x)
g <- function(x) {
x <- 10
y <- 10
UseMethod("g")
}
g.default <- function(x) c(x = x, y = y)
x <- 1
y <- 1
g(x)
g <- function(x) {
x <- 10
y <- 10
UseMethod("g")
}
g.default <- function(x) c(x = x, y = y)
x <- 1
y <- 1
g(x)
g.default(x)
ftype(`[`)
`[`
pryr::show_c_source(.Primitive("["))
install.packages("pryr")
library(pryr)
pryr::show_c_source(.Primitive("["))
s3_methods_generic("[")
s3_methods_class("[")
s3_dispatch(`[.Date`)
s3_dispatch([.Date)
s3_dispatch([.Date])
s3_dispatch(formals(`[.data.frame`))
s3_dispatch(`[`)
s3_dispatch(`[.data.frame`)
s3_dispatch([.data.frame)
s3_methods_generic("[") %>%
filter(visible)
visible <- s3_methods_generic("[") %>%
filter(visible)
visible
visible %>%
mutate(
method = paste0("[.", class),
argnames = purrr::map(method, ~ names(formals(.x))),
args = purrr::map(method, ~ formals(.x)),
args = purrr::map2(
argnames, args,
~ paste(.x, .y, sep = " = ")
),
args = purrr::set_names(args, method)
) %>%
pull(args) %>%
head()
visible %>%
mutate(
method = paste0("[.", class),
argnames = purrr::map(method, ~ names(formals(.x))),
args = purrr::map(method, ~ formals(.x)),
args = purrr::map2(
argnames, args,
~ paste(.x, .y, sep = " = ")
),
args = purrr::set_names(args, method)
)
visible_args <- visible %>%
mutate(
method = paste0("[.", class),
argnames = purrr::map(method, ~ names(formals(.x))),
args = purrr::map(method, ~ formals(.x)),
args = purrr::map2(
argnames, args,
~ paste(.x, .y, sep = " = ")
),
args = purrr::set_names(args, method)
)
visible_args
str(visible_args)
visible_args %>%
pull(args) %>%
head()
visible_args %>%
pull(args)
names(formals(`[.Date`))
names(formals(`[.Date`))
names(formals(`[.data.frame`))
visible_args <- visible %>%
mutate(
method = paste0("[.", class),
argnames = purrr::map(method, ~ names(formals(.x))),
args = purrr::map(method, ~ formals(.x)),
args = purrr::set_names(args, method)
)
visible_args
str(visible_args)
visible_args %>%
pull(args)
visible_args <- visible %>%
mutate(
method = paste0("[.", class),
argnames = purrr::map(method, ~ names(formals(.x))),
args = purrr::map(method, ~ formals(.x)),
args = purrr::map2(
argnames, args,
~ paste(.x, .y, sep = " = ")
),
args = purrr::set_names(args, method)
)
visible_args
str(visible_args)
visible_args %>%
pull(args)
x <- as.POSIXlt(ISOdatetime(2020, 1, 1, 0, 0, 1:3))
x
length(x)
length(unclass(x))
x[[1]] # the first date time
unclass(x)[[1]] # the first component, the number of seconds
x <- data.frame(x = 1:100, y = 1:100)
length(x)
nrow(x)
mod <- lm(mpg ~ wt, data = mtcars)
length(mod)
factor(letters[1:20], labels = "letter")
factor(letters[1:20])
factor <- factor(letters[1:20])
length(factor)
mod <- lm(mpg ~ wt, data = mtcars)
length(mod)
x <- rnorm(12)
Fn <- ecdf(x)
length(Fn)
x
Fn
str(Fn)
str(mod)
str(factor)
length(factor)
table(letters[1:20])
table <- table(letters[1:20])
str(table)
table <- table(letters[1:20])
str(table)
length(table)
x <- rnorm(12)
Fn <- ecdf(x)
str(Fn)
length(Fn)
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
str(z)
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
str(z)
length(z)
now <- as.POSIXlt(Sys.time())
now <- as.POSIXlt(Sys.time())
str(now)
length(now)
now <- as.POSIXlt(x)
now <- as.POSIXlt(z)
str(now)
length(now)
ordered(rnorm(12))
ordered <- ordered(rnorm(12))
str(ordered)
length(ordered)
now <- as.POSIXlt(z)
str(now)
length(now)
length(unclass(now))
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
str(z)
length(z)
length(unclass(z))
lm
mod <- lm(mpg ~ wt, data = mtcars)
length(mod)
typeof(mod)
str(mod)
mod <- lm(mpg ~ wt, data = mtcars)
typeof(mod)
length(mod)
attributes(mod)
summary(mod)
summary(mod)
new_lm <- function(coefficients,
residuals,
effects,
rank,
fitted.values,
assign,
qr,
df.residual,
xlevels,
call,
terms,
model) {
stopifnot(is.double(coefficients),
is.double(residuals),
is.double(effects),
is.integer(rank),
is.double(fitted.values),
is.integer(assign),
is.list(qr),
is.integer(df.residual),
is.list(xlevels),
is.language(call),
is.language(terms),
is.list(model)
)
structure(
list(
coefficients = coefficients,
residuals = residuals,
effects = effects,
rank = rank,
fitted.values = fitted.values,
assign = assign,
qr = qr,
df.residual = df.residual,
xlevels = xlevels,
call = call,
terms = terms,
model = model
),
class = "lm"
)
}
new_mod <- new_lm(mpg ~ wt, data = mtcars)
new_mod <- new_lm(mpg ~ wt)
new_mod <- new_lm(mod)
