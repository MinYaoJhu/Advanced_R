source("https://bioconductor.org/biocLite.R")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.14")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsubread")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools")
install.packages(c("cli", "cluster", "magrittr", "mgcv", "rlang", "vctrs", "xfun", "yaml"))
install.packages(c("cli", "cluster", "magrittr", "mgcv", "rlang", "vctrs", "xfun", "yaml"))
sessionInfo()
install.packages("rJava")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
install.packages("remotes")
remotes::install_github("aoles/RBioFormats")
install.packages("C:/Users/myj23/Downloads/CSCimages-main.zip", repos = NULL, type = "win.binary")
install.packages(c("cli", "htmltools", "MASS", "rlang", "stringi", "xfun"))
install.packages(c("cli", "htmltools", "MASS", "rlang", "stringi", "xfun"))
install.packages("installr")
library(installr)
updateR()
q()
sessionInfo()
install.packages("rJava")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EBImage")
install.packages("remotes")
remotes::install_github("aoles/RBioFormats")
install.packages("C:/Users/myj23/Downloads/CSCimages-main.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/myj23/Downloads/CSCimages-main.zip", repos = NULL, type = "win.binary")
install.packages("magrittr")
install.packages("purrr")
install.packages("stringr")
install.packages("plyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("C:/Users/myj23/Downloads/CSCimages-main.zip", repos = NULL, type = "win.binary")
install.packages(c("evaluate", "nlme", "pillar", "rmarkdown", "scales", "survival", "tinytex", "xfun"))
setwd("D:/Oldroyd_lab/GitHub/Advanced_R")
library(lobstr)
df <- data.frame(runif(3), runif(3))
names(df) <- c(1, 2)
df
df$1
df$"1"
df$"1" + df$"2"
df$"1"
df$"2"
df$"1" + df$"2"
df$"3" <- df$"1" + df$"2"
df
x <- runif(1e6)
y <- list(x, x, x)
View(y)
a <- c(1, 5, 3, 2)
b <- a
b[[1]] <- 10
library(lobstr)
grade <- function(x) {
if (x > 90) {
"A"
} else if (x > 80) {
"B"
} else if (x > 50) {
"C"
} else {
"F"
}
}
x1 <- if (TRUE) 1 else 2
x2 <- if (FALSE) 1 else 2
c(x1, x2)
greet <- function(name, birthday = FALSE) {
paste0(
"Hi ", name,
if (birthday) " and HAPPY BIRTHDAY"
)
}
greet("Maria", FALSE)
greet("Jaime", TRUE)
if ("x") 1
if (logical()) 1
if (NA) 1
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "false")
if (c(TRUE, FALSE)) 1
if (condition) true_action
grade <- function(x) {
if (x > 90) {
"A"
} else if (x > 80) {
"B"
} else if (x > 50) {
"C"
} else {
"F"
}
}
x1 <- if (TRUE) 1 else 2
x2 <- if (FALSE) 1 else 2
c(x1, x2)
greet <- function(name, birthday = FALSE) {
paste0(
"Hi ", name,
if (birthday) " and HAPPY BIRTHDAY"
)
}
greet("Maria", FALSE)
greet("Jaime", TRUE)
if ("x") 1
if (logical()) 1
if (NA) 1
if (c(TRUE, FALSE)) 1
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "false")
if (c(TRUE, FALSE)) 1
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "true")
if (c(TRUE, FALSE)) 1
Sys.setenv("_R_CHECK_LENGTH_1_CONDITION_" = "false")
if (c(TRUE, FALSE)) 1
if (c(TRUE, FALSE)) 1
x <- 1:10
ifelse(x %% 5 == 0, "XXX", as.character(x))
ifelse(x %% 2 == 0, "even", "odd")
dplyr::case_when(
x %% 35 == 0 ~ "fizz buzz",
x %% 5 == 0 ~ "fizz",
x %% 7 == 0 ~ "buzz",
is.na(x) ~ "???",
TRUE ~ as.character(x)
)
x_option <- function(x) {
if (x == "a") {
"option 1"
} else if (x == "b") {
"option 2"
} else if (x == "c") {
"option 3"
} else {
stop("Invalid `x` value")
}
}
x_option <- function(x) {
switch(x,
a = "option 1",
b = "option 2",
c = "option 3",
stop("Invalid `x` value")
)
}
(switch("c", a = 1, b = 2))
switch("c", a = 1, b = 2)
(switch("c", a = 1, b = 2))
legs <- function(x) {
switch(x,
cow = ,
horse = ,
dog = 4,
human = ,
chicken = 2,
plant = 0,
stop("Unknown input")
)
}
legs("cow")
legs("dog")
ifelse(TRUE, 1, "no")
ifelse(FALSE, 1, "no")
ifelse(NA, 1, "no")
?ifelse()
utils::str(ifelse(TRUE, 1, "no"))
?ifelse()
utils::str(ifelse(TRUE, 1, "no"))
utils::str(ifelse(FALSE, 1, "no"))
utils::str(ifelse(NA, 1, "no"))
x <- 1:10
if (length(x)) "not empty" else "empty"
x <- numeric()
if (length(x)) "not empty" else "empty"
x <- 1:10
x
if (length(x)) "not empty" else "empty"
x <- numeric()
x
if (length(x)) "not empty" else "empty"
x <- 1:10
length(x)
if (length(x)) "not empty" else "empty"
x <- numeric()
length(x)
if (length(x)) "not empty" else "empty"
for (item in vector) perform_action
for (i in 1:3) {
print(i)
}
i <- 100
for (i in 1:3) {}
i
for (i in 1:10) {
if (i < 3)
next
print(i)
if (i >= 5)
break
}
means <- c(1, 50, 20)
out <- vector("list", length(means))
for (i in 1:length(means)) {
out[[i]] <- rnorm(10, means[[i]])
}
out
str(out)
means <- c()
out <- vector("list", length(means))
for (i in 1:length(means)) {
out[[i]] <- rnorm(10, means[[i]])
}
1:length(means)
means <- c()
out <- vector("list", length(means))
for (i in 1:length(means)) {
out[[i]] <- rnorm(10, means[[i]])
}
1:length(means)
seq_along(means)
out <- vector("list", length(means))
for (i in seq_along(means)) {
out[[i]] <- rnorm(10, means[[i]])
}
seq_along(means)
out <- vector("list", length(means))
for (i in seq_along(means)) {
out[[i]] <- rnorm(10, means[[i]])
}
seq_along(means)
xs <- as.Date(c("2020-01-01", "2010-01-01"))
for (x in xs) {
print(x)
}
for (i in seq_along(xs)) {
print(xs[[i]])
}
x <- numeric()
out <- vector("list", length(x))
for (i in 1:length(x)) {
out[i] <- x[i] ^ 2
}
out
for (i in 1:3) {
i <- i * 2
print(i)
}
xs <- c(1, 2, 3)
for (x in xs) {
xs <- c(xs, x * 2)
}
xs
x <- numeric()
out <- vector("list", length(x))
out
str(out)
out
str(out)
length(x)
out
for (i in 1:length(x)) {
out[i] <- x[i] ^ 2
}
out
help(%%)
?mean
x <- c(1:10, NA)
mean(x, na.rm = TRUE)
mean(, TRUE, x = c(1:10, NA))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
f02 <- function(x, y) {
# A comment
x + y
}
formals(f02)
body(f02)
environment(f02)
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
environment(f1)
environment(f1(1))
inner <- f1(1)
body(inner)
inner()
onePlusTen <- f1(1)
tenPlusTen <- f1(10)
onePlusTen()
tenPlusTen()
tenPlusTen
onePlusTen
knitr::include_graphics("diagrams/functions/components.png")
attr(f02, "srcref")
sum
`[`
sum
`[`
typeof(sum)
typeof(`[`)
formals(sum)
body(sum)
environment(sum)
f01 <- function(x) {
sin(1 / x ^ 2)
}
f01 <- function(x) {
sin(1 / x ^ 2)
}
knitr::include_graphics("diagrams/functions/first-class.png")
lapply(mtcars, function(x) length(unique(x)))
Filter(function(x) !is.numeric(x), mtcars)
integrate(function(x) sin(x) ^ 2, 0, pi)
lapply(mtcars, function(x) length(unique(x)))
Filter(function(x) !is.numeric(x), mtcars)
integrate(function(x) sin(x) ^ 2, 0, pi)
funs <- list(
half = function(x) x / 2,
double = function(x) x * 2
)
funs$double(10)
args <- list(1:10, na.rm = TRUE)
do.call(mean, args)
?match.fun()
?mean
?match.fun()
match.fun(mean)
function(x) 3()
(function(x) 3)()
function1 <- function(x) 3()
function1()
function1 <- function(x) 3()
#function1()
#Error in function1() : attempt to apply non-function
function2 <- (function(x) 3)()
function2()
function2
body(function2)
function1()
function1
function1()
function1 <- function(x) 3()
function1()
function2()
function2 <- (function(x) 3)()
function2()
function2(3)
function2()
function2 <- (function(x) 3)
function2()
function1 <- function(x) 3
function1()
function1 <- function(x) 3
function1()
sapply(1:2, function(x) x + 1L)
function1 <- function(x) 3()
function1()
function1 <- function(x) 3()
#function1()
#Error in function1() : attempt to apply non-function
?is.function()
?is.primitive()
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
objs
str(objs)
funs
str(funs)
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
str(objs)
str(funs)
library(purrr)
n_args <- funs %>%
map(formals) %>%
map_int(length)
funs %>%
formals()
n_args %>%
sort(decreasing = TRUE) %>%
head()
str(n_args)
n_args %>%
sort(decreasing = TRUE)
n_args %>%
max()
sum(n_args == 0)
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
pri <- Filter(is.primitive, objs)
str(pri)
length(pri)
n_args %>%
filter(n_args == 0)
n_args %>%
which.max()
n_args %>%
filter( == 0)
n_args %>%
filter(. == 0)
n_args %>%
which.min()
n_args %>%
which.min()
n_args %>%
which(.==0)
n_args == 0
n_args %>% filter(n_args == 0)
funs %>% filter(n_args == 0)
n_args == 0
