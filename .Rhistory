opts <- options(warnPartialMatchDollar = FALSE)
df1 <- data.frame(xyz = "a")
df2 <- tibble(xyz = "a")
str(df1$x)
str(df2$x)
if (!is.null(opts$warnPartialMatchDollar))
options(opts)
is.data.frame(df1)
is.data.frame(df2)
is_tibble(df1)
is_tibble(df2)
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)
data.frame(
x = 1:3,
y = I(list(1:2, 1:3, 1:4))
)
knitr::include_graphics("diagrams/vectors/data-frame-list.png")
tibble(
x = 1:3,
y = list(1:2, 1:3, 1:4)
)
dfm <- data.frame(
x = 1:3 * 10
)
dfm$y <- matrix(1:9, nrow = 3)
dfm$z <- data.frame(a = 3:1, b = letters[1:3], stringsAsFactors = FALSE)
str(dfm)
knitr::include_graphics("diagrams/vectors/data-frame-matrix.png")
dfm[1, ]
df0 <- data.frame()
str(df0)
nrow(df0)
ncol(df0)
#data.frame(row.names = c("a", "b", "b", "c"))
df <- data.frame(
age = c(35, 27, 18),
hair = c("blond", "brown", "black"))
df
str(df)
is.matrix(df)
t(df)
str(t(df))
is.matrix(t(df))
is.list(t(df))
t(t(df))
str(t(t(df)))
is.matrix(t(t(df)))
is.list(t(t(df)))
#?as.matrix
#?data.matrix()
df
as.matrix(df)
data.matrix(df)
typeof(NULL)
length(NULL)
x <- NULL
attr(x, "y") <- 1
is.null(NULL)
c()
library(tidyverse)
knitr::include_graphics("diagrams/vectors/summary-tree.png")
knitr::include_graphics("diagrams/vectors/summary-tree-atomic.png")
lgl_var <- c(TRUE, FALSE)
int_var <- c(1L, 6L, 10L)
dbl_var <- c(1, 2.5, 4.5)
chr_var <- c("these are", "some strings")
c(c(1, 2), c(3, 4))
knitr::include_graphics("diagrams/vectors/atomic.png")
typeof(lgl_var)
typeof(int_var)
typeof(dbl_var)
typeof(chr_var)
length(lgl_var)
length(int_var)
length(dbl_var)
length(chr_var)
NA > 5
10 * NA
!NA
NA ^ 0
NA | TRUE
NA & FALSE
x <- c(NA, 5, NA, 10)
x == NA
is.na(x)
str(c("a", 1))
x <- c(FALSE, FALSE, TRUE)
as.numeric(x)
# Total number of TRUEs
sum(x)
# Proportion that are TRUE
mean(x)
as.integer(c("1", "1.5", "a"))
#?raw
xx <- raw(2)
xx
str(xx)
#?complex
z <- complex(length.out = 1, real = 2, imaginary = 3, modulus = 4, argument = 5)
z
str(z)
1 == "1"
-1 < FALSE
"one" < 2
#?is.atomic()
# creating R objects
myname <- "Theophilus"
addition <- 5 + 3
numbers <- c(0:10)
a <- (quote(exp))
b <- expression(x+1)
# implementing the is.atomic() function
is.atomic(myname)
is.atomic(addition)
is.atomic(numbers)
is.atomic(a)
is.atomic(b)
is.vector(myname)
is.vector(addition)
is.vector(numbers)
is.vector(a)
is.vector(b)
#?is.numeric()
#?is.vector()
a <- 1:3
attr(a, "x") <- "abcdef"
attr(a, "x")
attr(a, "y") <- 4:6
str(attributes(a))
# Or equivalently
a <- structure(
1:3,
x = "abcdef",
y = 4:6
)
str(attributes(a))
knitr::include_graphics("diagrams/vectors/attr.png")
attributes(a[1])
attributes(sum(a))
# When creating it:
x <- c(a = 1, b = 2, c = 3)
# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")
# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
knitr::include_graphics("diagrams/vectors/attr-names-1.png")
knitr::include_graphics("diagrams/vectors/attr-names-2.png")
# Two scalar arguments specify row and column sizes
x <- matrix(1:6, nrow = 2, ncol = 3)
x
# One vector argument to describe all dimensions
y <- array(1:12, c(2, 3, 2))
y
# You can also modify an object in place by setting dim()
z <- 1:6
dim(z) <- c(3, 2)
z
str(1:3)                   # 1d vector
str(matrix(1:3, ncol = 1)) # column vector
str(matrix(1:3, nrow = 1)) # row vector
str(array(1:3, 3))         # "array" vector
#?setNames()
#?unname()
getAnywhere(setNames)
x <- setNames(1:3, c("a", "b", "c"))
str(x)
getAnywhere(unname)
unname(x) %>% str()
vector <- c(1:10)
vector
dim(vector)
NROW(vector)
NCOL(vector)
nrow(vector)
ncol(vector)
#?NROW()
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
str(x1)
str(x2)
str(x3)
str(1:5)
attributes(x1)
attributes(x2)
attributes(x3)
attributes(1:5)
structure(1:5, comment = "my attribute")
#?comment
#?attributes() # These functions access an object's attributes.
#?attr() # Get or set specific attributes of an object.
#?structure() # structure returns the given object with further attributes set.
attributes(structure(1:5, comment = "my attribute"))
knitr::include_graphics("diagrams/vectors/summary-tree-s3-1.png")
x <- factor(c("a", "b", "b", "a"))
x
typeof(x)
attributes(x)
knitr::include_graphics("diagrams/vectors/factor.png")
sex_char <- c("m", "m", "m")
sex_factor <- factor(sex_char, levels = c("m", "f"))
table(sex_char)
table(sex_factor)
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
today <- Sys.Date()
typeof(today)
attributes(today)
date <- as.Date("1970-02-01")
unclass(date)
now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct
typeof(now_ct)
attributes(now_ct)
structure(now_ct, tzone = "Asia/Tokyo")
structure(now_ct, tzone = "America/New_York")
structure(now_ct, tzone = "Australia/Lord_Howe")
structure(now_ct, tzone = "Europe/Paris")
one_week_1 <- as.difftime(1, units = "weeks")
one_week_1
typeof(one_week_1)
attributes(one_week_1)
one_week_2 <- as.difftime(7, units = "days")
one_week_2
typeof(one_week_2)
attributes(one_week_2)
# ?table()
## Check the design:
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
t <- table(state.division, state.region)
typeof(t)
attributes(t)
f1 <- factor(letters)
f1
levels(f1)
levels(f1) <- rev(levels(f1))
f1
levels(f1)
f2 <- rev(factor(letters))
f2
levels(f2)
f3 <- factor(letters, levels = rev(letters))
f3
levels(f3)
l1 <- list(
1:3,
"a",
c(TRUE, FALSE, TRUE),
c(2.3, 5.9)
)
typeof(l1)
str(l1)
lobstr::obj_size(mtcars)
l2 <- list(mtcars, mtcars, mtcars, mtcars)
lobstr::obj_size(l2)
knitr::include_graphics("diagrams/vectors/list.png")
l3 <- list(list(list(1)))
str(l3)
knitr::include_graphics("diagrams/vectors/list-recursive.png")
l4 <- list(list(1, 2), c(3, 4))
l5 <- c(list(1, 2), c(3, 4))
str(l4)
str(l5)
knitr::include_graphics("diagrams/vectors/list-c.png")
list(1:3)
as.list(1:3)
is.list(list(1:3))
is.list(as.list(1:3))
l <- list(1:3, "a", TRUE, 1.0)
dim(l) <- c(2, 2)
l
l[[1, 1]]
#?unlist()
#?as.vector()
L<-list(1:3)
is.list(L)
is.vector(L)
L2<-as.vector(L)
is.list(L2)
is.vector(L2)
L<-list(1:3)
is.list(L)
is.vector(L)
L2<-unlist(L)
is.list(L2)
is.vector(L2)
today <- Sys.Date()
today
typeof(today)
attributes(today)
now_ct <- Sys.time()
now_ct
typeof(now_ct)
attributes(now_ct)
c(today,now_ct)
c(now_ct,today)
list(today,now_ct)
list(now_ct,today)
unlist(list(today,now_ct))
unlist(list(now_ct,today))
knitr::include_graphics("diagrams/vectors/summary-tree-s3-2.png")
df1 <- data.frame(x = 1:3, y = letters[1:3])
typeof(df1)
attributes(df1)
library(tibble)
df2 <- tibble(x = 1:3, y = letters[1:3])
typeof(df2)
attributes(df2)
df <- data.frame(
x = 1:3,
y = c("a", "b", "c")
)
str(df)
df1 <- data.frame(
x = 1:3,
y = c("a", "b", "c"),
stringsAsFactors = FALSE
)
str(df1)
df2 <- tibble(
x = 1:3,
y = c("a", "b", "c")
)
str(df2)
names(data.frame(`1` = 1))
names(tibble(`1` = 1))
data.frame(x = 1:4, y = 1:2)
data.frame(x = 1:4, y = 1:3)
tibble(x = 1:4, y = 1)
tibble(x = 1:4, y = 1:2)
tibble(
x = 1:3,
y = x * 2
)
knitr::include_graphics("diagrams/vectors/data-frame-1.png")
knitr::include_graphics("diagrams/vectors/data-frame-2.png")
df3 <- data.frame(
age = c(35, 27, 18),
hair = c("blond", "brown", "black"),
row.names = c("Bob", "Susan", "Sam")
)
df3
rownames(df3)
df3["Bob", ]
df3[c(1, 1, 1), ]
as_tibble(df3, rownames = "name")
dplyr::starwars
opts <- options(warnPartialMatchDollar = FALSE)
df1 <- data.frame(xyz = "a")
df2 <- tibble(xyz = "a")
str(df1$x)
str(df2$x)
if (!is.null(opts$warnPartialMatchDollar))
options(opts)
is.data.frame(df1)
is.data.frame(df2)
is_tibble(df1)
is_tibble(df2)
df <- data.frame(x = 1:3)
df$y <- list(1:2, 1:3, 1:4)
data.frame(
x = 1:3,
y = I(list(1:2, 1:3, 1:4))
)
knitr::include_graphics("diagrams/vectors/data-frame-list.png")
tibble(
x = 1:3,
y = list(1:2, 1:3, 1:4)
)
dfm <- data.frame(
x = 1:3 * 10
)
dfm$y <- matrix(1:9, nrow = 3)
dfm$z <- data.frame(a = 3:1, b = letters[1:3], stringsAsFactors = FALSE)
str(dfm)
knitr::include_graphics("diagrams/vectors/data-frame-matrix.png")
dfm[1, ]
df0 <- data.frame()
str(df0)
nrow(df0)
ncol(df0)
#data.frame(row.names = c("a", "b", "b", "c"))
df <- data.frame(
age = c(35, 27, 18),
hair = c("blond", "brown", "black"))
df
str(df)
is.matrix(df)
t(df)
str(t(df))
is.matrix(t(df))
is.list(t(df))
t(t(df))
str(t(t(df)))
is.matrix(t(t(df)))
is.list(t(t(df)))
#?as.matrix
#?data.matrix()
df
as.matrix(df)
data.matrix(df)
typeof(NULL)
length(NULL)
x <- NULL
attr(x, "y") <- 1
is.null(NULL)
c()
# R program to create complex Vectors
# create complex vector
v1 <- c(1+2i, 3i, 4-5i, -12+6i)
# print vector
print(v1)
# display type of vector
print(typeof(v1))
# R program to illustrate raw vector
# Creating raw vector using raw()
print(raw(3))
# Print the type of vector
print(typeof(raw(3)))
as.raw(2)
charToRaw("A")
as.raw(40)
charToRaw("A")
#?raw
xx <- raw(2)
xx[1] <- as.raw(40)     # NB, not just 40.
xx[2] <- charToRaw("A")
xx       ## 28 41   -- raw prints hexadecimals
dput(xx) ## as.raw(c(0x28, 0x41))
as.integer(xx) ## 40 65
xx <- raw(2)
xx[1] <- as.raw(40)     # NB, not just 40.
xx[2] <- charToRaw("A")
xx       ## 28 41   -- raw prints hexadecimals
dput(xx) ## as.raw(c(0x28, 0x41))
as.integer(xx) ## 40 65
## create a complex normal vector
z <- complex(real = stats::rnorm(100), imaginary = stats::rnorm(100))
## or also (less efficiently):
z2 <- 1:2 + 1i*(8:9)
z
## create a complex normal vector
z <- complex(real = stats::rnorm(10), imaginary = stats::rnorm(10))
z
## or also (less efficiently):
z2 <- 1:2 + 1i*(8:9)
z2
c(1, FALSE)
c("a", 1)
c(TRUE, 1L)
setNames
vector <- c(1:10)
vector
dim(vector)
NROW(vector)
NCOL(vector)
nrow(vector)
ncol(vector)
#?NROW()
#?comment
?attributes() # These functions access an object's attributes.
?comment
attributes(structure(1:5, comment = "my attribute"))
attr(structure(1:5, comment = "my attribute"))
attr((1:5, comment = "my attribute"))
test <- structure(1:5, comment = "my attribute")
attributes(test)
attr(test, which = "comment")
attr(test)
?table()
## Check the design:
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
## Simple frequency distribution
table(rpois(100, 5))
x <- table(mtcars[c("vs", "cyl", "am")])
typeof(x)
attributes(x)
attributes(t)
attributes(x)
str(x)
## Check the design:
with(warpbreaks, table(wool, tension))
table(wool, tension)
## Check the design:
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
## Check the design:
# warpbreaks {datasets} The Number of Breaks in Yarn during Weaving
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
f1 <- factor(letters)
f1
levels(f1)
levels(f1) <- rev(levels(f1))
f1
levels(f1)
f1 <- factor(letters)
f1
levels(f1)
levels(f1) <- rev(levels(f1))
f1
levels(f1)
f2 <- rev(factor(letters))
f2
levels(f2)
f2 <- rev(factor(letters))
f2
levels(f2)
